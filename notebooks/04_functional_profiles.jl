# # Functional profiles
#
# Functional profiles for metagenomic data
# were generated by HUMAnN version 3.
# 
# They come in several flavors.
# The most expansive characterization is using UniRef90 IDs,
# which are generated for all protein sequences based on
# clustering at 90% identity,
# regardless of whether additional functional information is available.
#
# Other protein identification schemas,
# in rough order of number of granularity
# (and also size):
#
# - Pfam
# - Kegg Orthology (KO)
# - Level 4 Enzyme commision (EC) number
# - Pathways
#
using ResonanceMicrobiome
using Microbiome.MultivariateStats
using CairoMakie
using AbstractPlotting.ColorSchemes


colormap = ColorSchemes.tab20.colors

#-

## note - this can take a long time
all_unirefs = functional_profiles(:unirefs)
all_unirefs_metadata = resonance_metadata(name.(samples(all_unirefs)))


all_unirefs_dm = braycurtis(all_unirefs)
all_unirefs_pco = fit(MDS, all_unirefs_dm, distances=true)

#- 

figure1 = Figure(resolution=(1200, 800));

fig1a = figure1[1,1] = Axis(figure1, title="All participants", xlabel=mds_format(all_unirefs_pco, 1), ylabel=mds_format(all_unirefs_pco, 2))
scatter!(fig1a, projection(all_unirefs_pco)[:,1], projection(all_unirefs_pco)[:,2], 
    color=categorical_colors(all_unirefs_metadata.ageLabel, ["Prenatal", "1 and under", "1 to 2", "2 and over", missing], colormap[[9, 2, 3, 5, 15]]))
figure1

#- 

kids_unirefs = all_unirefs[:, startswith.(samplenames(all_unirefs), 'C')]
kids_unirefs = kids_unirefs[vec(featuretotals(kids_unirefs) .!= 0), :]

kids_metadata = resonance_metadata(name.(samples(kids_unirefs)))

kids_metadata.ageLabel

kids_dm = braycurtis(kids_unirefs)
kids_pco = pcoa(kids_unirefs)

fig1b = figure1[1,2] = Axis(figure1, title="Children", xlabel=mds_format(kids_pco, 1), ylabel=mds_format(kids_pco, 2))
scatter!(fig1b, projection(kids_pco)[:,1] .* -1, projection(kids_pco)[:,2],
        color=categorical_colors(kids_metadata.ageLabel, ["Prenatal", "1 and under", "1 to 2", "2 and over", missing], colormap[[9, 2, 3, 5, 15]]))

fig1ab_legend = figure1[1,3] = Legend(figure1,
    [
        MarkerElement(color = colormap[9], marker = :circ, strokecolor = :black)
        MarkerElement(color = colormap[2], marker = :circ, strokecolor = :black)
        MarkerElement(color = colormap[3], marker = :circ, strokecolor = :black)
        MarkerElement(color = colormap[5], marker = :circ, strokecolor = :black)
        MarkerElement(color = colormap[15], marker = :circ, strokecolor = :black)
    ],
    ["mom", "1 and under", "1 to 2", "over 2", "missing"])

has_age_unirefs = kids_unirefs[:, map(!ismissing, kids_metadata.correctedAgeDays)]
has_age_metadata = resonance_metadata(name.(samples(has_age_unirefs)))

has_age_metadata.frac_identified = 1 .- sum(abundances(has_age_metadata[["UNGROUPED", "UNMAPPED"], :]), dims=1)

has_age_pco = pcoa(has_age_unirefs)

fig1c = figure1[2, 1:2] = Axis(figure1, xlabel=mds_format(kids_pco, 1), ylabel="Age (years)")

scatter!(fig1c, projection(has_age_pco)[:,1] .* -1, has_age_metadata.correctedAgeDays ./ 365, color=has_age_metadata.frac_identified, label="frac_identified diversity")

fig1c_legend = figure1[2,3] = Colorbar(figure1, halign=:left, limits=extrema(has_age_metadata.frac_identified), width=25, label="frac_identified diversity", )
figure1