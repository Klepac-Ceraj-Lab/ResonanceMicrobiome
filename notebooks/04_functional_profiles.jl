# # Functional profiles
#
# Functional profiles for metagenomic data
# were generated by HUMAnN version 3.
# 
# They come in several flavors.
# The most expansive characterization is using UniRef90 IDs,
# which are generated for all protein sequences based on
# clustering at 90% identity,
# regardless of whether additional functional information is available.
#
# Other protein identification schemas,
# in rough order of descreasing granularity
# (and increasing size):
#
# - Pfam
# - Kegg Orthology (KO)
# - Level 4 Enzyme commision (EC) number
# - Pathways
#
using ResonanceMicrobiome
using Microbiome.MultivariateStats
using CairoMakie
using AbstractPlotting.ColorSchemes
using SplitApplyPlot

colormap = ColorSchemes.tab20.colors

#-

## note - this can take a long time
all_unirefs = functional_profiles(:unirefs)
all_metadata = resonance_metadata(name.(samples(all_unirefs)))
kids_metadata = filter(row-> !ismissing(row.correctedAgeDays), all_metadata)


all_unirefs_dm = braycurtis(all_unirefs)
all_unirefs_pco = fit(MDS, all_unirefs_dm, distances=true)

kids_unirefs = all_unirefs[:, kids_metadata.sample]
kids_unirefs = kids_unirefs[vec(featuretotals(kids_unirefs) .!= 0), :]
kids_metadata.frac_unirefs_identified = vec(1 .- sum(abundances(kids_unirefs["UNMAPPED", :]) .* 100, dims=1))
kids_metadata.n_unirefs = map(c-> count(!=(0), c), eachcol(abundances(kids_unirefs)))

kids_dm = braycurtis(kids_unirefs)
kids_pco = fit(MDS, kids_dm, distances=true)

all_ecs = functional_profiles(:ecs)
all_kos = functional_profiles(:kos)
all_pfams = functional_profiles(:pfams)

kids_ecs = all_ecs[:, kids_metadata.sample]
kids_ecs = kids_ecs[vec(featuretotals(kids_ecs) .!= 0), :]
kids_metadata.frac_ecs_identified = vec(1 .- sum(abundances(kids_ecs[["UNMAPPED", "UNGROUPED"], :]) .* 100, dims=1))
kids_metadata.n_ecs = map(c-> count(!=(0), c), eachcol(abundances(kids_ecs)))
kids_kos = all_kos[:, kids_metadata.sample]
kids_kos = kids_kos[vec(featuretotals(kids_kos) .!= 0), :]
kids_metadata.frac_kos_identified = vec(1 .- sum(abundances(kids_kos[["UNMAPPED", "UNGROUPED"], :]) .* 100, dims=1))
kids_metadata.n_kos = map(c-> count(!=(0), c), eachcol(abundances(kids_kos)))
kids_pfams = all_pfams[:, kids_metadata.sample]
kids_pfams = kids_pfams[vec(featuretotals(kids_pfams) .!= 0), :]
kids_metadata.frac_pfams_identified = vec(1 .- sum(abundances(kids_pfams[["UNMAPPED", "UNGROUPED"], :]) .* 100, dims=1))
kids_metadata.n_pfams = map(c-> count(!=(0), c), eachcol(abundances(kids_pfams)))

kids_ecs_dm = braycurtis(kids_ecs)
kids_ecs_pco = fit(MDS, kids_ecs_dm, distances=true)
kids_kos_dm = braycurtis(kids_kos)
kids_kos_pco = fit(MDS, kids_kos_dm, distances=true)
kids_pfams_dm = braycurtis(kids_pfams)
kids_pfams_pco = fit(MDS, kids_pfams_dm, distances=true)

#- 

figure1 = Figure(resolution=(900, 1200));

fig1a = figure1[1,1] = Axis(figure1, xlabel=mds_format(kids_pco, 1), ylabel=mds_format(kids_pco, 2))
scatter!(fig1a, projection(kids_pco)[:,1] .* -1, projection(kids_pco)[:,2],
        color=categorical_colors(kids_metadata.ageLabel, ["1 and under", "1 to 2", "2 and over"], colormap[[2, 3, 5, 15]]))

fig1a_legend = figure1[1,2] = Legend(figure1,
    [
        MarkerElement(color = colormap[2], marker = :circle, strokecolor = :black)
        MarkerElement(color = colormap[3], marker = :circle, strokecolor = :black)
        MarkerElement(color = colormap[5], marker = :circle, strokecolor = :black)
    ],
    ["1 and under", "1 to 2", "over 2"])


fig1b = Axis(figure1[2,1], xlabel = "Unique genes identified (n)",   ylabel = "Fraction of genes identified")

scatter!(fig1b, kids_metadata.n_unirefs, kids_metadata.frac_unirefs_identified, color=collect(skipmissing(kids_metadata.correctedAgeDays)),
        colormap=:heat)
fig1b_legend = figure1[2,2] = Colorbar(figure1, halign=:left, limits=extrema(kids_metadata.correctedAgeDays), width=25, label="Age (days)",
                                        colormap=:heat)
figure1[0,1] = Label(figure1, "UniRef90s", textsize=30, tellwidth=false)
figure1

other_func = figure1[4:5, 1:2] = GridLayout()

#-



#-
fig2a = other_func[1,1] = Axis(figure1, xlabel = mds_format(kids_ecs_pco, 1),   ylabel = mds_format(kids_ecs_pco, 2))
fig2b = other_func[1,2] = Axis(figure1, xlabel = mds_format(kids_kos_pco, 1),   ylabel = mds_format(kids_kos_pco, 2))
fig2c = other_func[1,3] = Axis(figure1, xlabel = mds_format(kids_pfams_pco, 1), ylabel = mds_format(kids_pfams_pco, 2))
fig2d = other_func[2,1] = Axis(figure1, xlabel = "Unique genes identified (n)",   ylabel = "Fraction of genes identified")
fig2e = other_func[2,2] = Axis(figure1, xlabel = "Unique genes identified (n)",   ylabel = "Fraction of genes identified")
fig2f = other_func[2,3] = Axis(figure1, xlabel = "Unique genes identified (n)", ylabel = "Fraction of genes identified")

figure1

other_func[0, 1] = Label(figure1, "ECs", textsize=30, tellwidth=false)
other_func[1, 2] = Label(figure1, "KOs", textsize=30, tellwidth=false)
other_func[1, 3] = Label(figure1, "Pfams", textsize=30, tellwidth=false)

scatter!(fig2a, projection(kids_ecs_pco)[:,1], projection(kids_ecs_pco)[:,2],
    color=categorical_colors(kids_metadata.ageLabel, ["1 and under", "1 to 2", "2 and over"],
    colormap[[2, 3, 5]]))
scatter!(fig2b, projection(kids_kos_pco)[:,1], projection(kids_kos_pco)[:,2], 
    color=categorical_colors(kids_metadata.ageLabel, ["1 and under", "1 to 2", "2 and over"],
    colormap[[2, 3, 5]]))
scatter!(fig2c, projection(kids_pfams_pco)[:,1], projection(kids_pfams_pco)[:,2], 
    color=categorical_colors(kids_metadata.ageLabel, ["1 and under", "1 to 2", "2 and over"],
    colormap[[2, 3, 5]]))

scatter!(fig2d, kids_metadata.n_ecs, kids_metadata.frac_ecs_identified, color=collect(skipmissing(kids_metadata.correctedAgeDays)),
        colormap=:heat)
scatter!(fig2e, kids_metadata.n_kos, kids_metadata.frac_kos_identified, color=collect(skipmissing(kids_metadata.correctedAgeDays)),
        colormap=:heat)
scatter!(fig2f, kids_metadata.n_pfams, kids_metadata.frac_pfams_identified, color=collect(skipmissing(kids_metadata.correctedAgeDays)),
        colormap=:heat)
linkyaxes!(fig2d,fig2e,fig2f)
figure1
#-

CairoMakie.save("figures/04_other_functions.pdf", figure1)
figure1
