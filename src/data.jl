"""
    airtable_metadata(key=ENV["AIRTABLE_KEY"])
Get fecal sample metadata table from airtable.
The API `key` comes from https://airtable.com/account.

This is unlikely to work if you're not in the VKC lab,
but published sample metadata is available from OSF.io
using `datadep"sample metadata"`.
"""
function airtable_metadata(key=Airtable.Credential())
    records = []
    req = Airtable.get(key, "/v0/appyRaPsZ5RsY4A1h", "Master"; view="ALL_NO_EDIT", filterByFormula="NOT({Mgx_batch}='')")
    append!(records, req.records)
    while haskey(req, :offset) && length(records) < 2200
        @info "Making another request"
        req = Airtable.get(key, "/v0/appyRaPsZ5RsY4A1h/", "Master"; view="ALL_NO_EDIT", filterByFormula="NOT({Mgx_batch}='')", offset=req.offset)
        append!(records, req.records)
        sleep(0.250)
    end

    df = DataFrame()
    for record in records
        append!(df, filter(p -> !(last(p) isa AbstractArray), record.fields), cols=:union)
    end

    rename!(df, "SampleID"=>"sample", "TimePoint"=>"timepoint", "SubjectID"=>"subject")
    
    transform!(df, "subject"   => ByRow(s-> parse(Int, s)) => "subject",
                   "timepoint" => ByRow(tp-> parse(Int, tp)) => "timepoint",
                   "Mgx_batch" => ByRow(b-> !ismissing(b) ? parse(Int, match(r"Batch (\d+)", b).captures[1]) : missing) => "Mgx_batch",
                   "16S_batch" => ByRow(b-> !ismissing(b) ? parse(Int, match(r"Batch (\d+)", b).captures[1]) : missing) => "16S_batch")
    return select(df, Cols(:sample, :subject, :timepoint, :))
end

function resonance_metadata()
    samples = CSV.read(datadep"sample_metadata/sample_metadata.csv", DataFrame)
    
    clinical = CSV.read(datadep"clinical_metadata/clinical_metadata.csv", DataFrame)
    rename!(clinical, "subjectID"=> "subject")
    filter!(row-> all(!ismissing, [row.subject, row.timepoint]), clinical)
    disallowmissing!(clinical, [:subject, :timepoint])
    return leftjoin(samples, clinical, on=[:subject, :timepoint])
end

function post_fetch_knead(tarball)
    unpack(tarball)
    allcounts = DataFrame()
    for (root, dir, files) in walkdir(pwd())
        length(files) == 1 || continue
        counts = first(files)
        counts == "kneaddata_read_counts.txt" || continue
        batch = match(r"biobakery3\/batch(\d{3})\/output", root).captures[1]
        batch = parse(Int, batch)
        df = CSV.read(joinpath(root, counts), DataFrame)
        df[!, :batch] .= batch
        append!(allcounts, df)
    end
    CSV.write("allcounts.csv", allcounts)
    rm("biobakery3", recursive=true, force=true)
    rm("download", force=true)  # we don't know where this file comes from but we want it gone
end

function post_fetch_taxa(tarball)
    unpack(tarball)
    profile_paths = String[]
    for (root, dir, files) in walkdir(pwd())
        filter!(f-> occursin("profile.tsv", f), files)
        append!(profile_paths, joinpath.(root, files))
    end
    
    df = DataFrame()
    for profile in profile_paths
        append!(df, CSV.File(profile, datarow=5, header=["clade", "NCBI_taxid", "abundance", "additional_species"]))
    end
    Arrow.write("taxonomic_profiles.arrow", df)

    # profiles = Tables.partitioner(profile_paths) do profile
    #     df = CSV.File(profile, datarow=5, header=["clade", "NCBI_taxid", "abundance", "additional_species"])
    # end
    # Arrow.write("taxonomic_profiles.arrow", profiles)
    rm("biobakery3", recursive=true, force=true)
    rm("download", force=true)  # we don't know where this file comes from but we want it gone
end

post_fetch_osf(::Any) = rm("download", force=true)
post_fetch_osf() = rm("download", force=true)

function __init__()
    register(DataDep(
        "taxonomic_profiles",
        """
        Taxonomic profiles generated by MetaPhlAn.
        """,
        "https://osf.io/kyh48/download",
        post_fetch_method = ResonanceMicrobiome.post_fetch_taxa
        )
    )

    register(DataDep(
        "kneaddata_counts",
        """
        Diagnostic information about sequence reads after cleaning with KneadData.
        """,
        "https://osf.io/ugxjs/download";
        post_fetch_method = ResonanceMicrobiome.post_fetch_knead,
        )
    )

    register(DataDep(
        "clinical_metadata",
        """,
        Clinical and subject-specific metadata.
        """,
        "https://osf.io/53b6p/download",
        post_fetch_method = ResonanceMicrobiome.post_fetch_osf
    ))
    
    register(DataDep(
        "sample_metadata",
        """,
        Clinical and subject-specific metadata.
        """,
        "https://osf.io/5z8tw/download",
        post_fetch_method = ResonanceMicrobiome.post_fetch_osf
    ))
end