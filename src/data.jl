function post_fetch_knead(tarball)
    unpack(tarball)
    allcounts = DataFrame()
    for (root, dir, files) in walkdir(pwd())
        length(files) == 1 || continue
        counts = first(files)
        counts == "kneaddata_read_counts.txt" || continue
        batch = match(r"biobakery3\/batch(\d{3})\/output", root).captures[1]
        batch = parse(Int, batch)
        df = CSV.read(joinpath(root, counts), DataFrame)
        df[!, :batch] .= batch
        append!(allcounts, df)
    end
    CSV.write("allcounts.csv", allcounts)
    rm("biobakery3", recursive=true, force=true)
    rm("download", force=true)  # we don't know where this file comes from but we want it gone
end

register(DataDep(
   "kneaddata_counts",
   """
   Diagnostic information about sequence reads after cleaning with KneadData.
   """,
   "https://osf.io/ugxjs/download";
   post_fetch_method = post_fetch_knead,
))

function post_fetch_taxa(tarball)
    unpack(tarball)
    profile_paths = String[]
    for (root, dir, files) in walkdir(pwd())
        filter!(f-> occursin("profile.tsv", f), files)
        append!(profile_paths, joinpath.(root, files))
    end

    profiles = Tables.partitioner(profile_paths) do profile
        df = CSV.File(profile, datarow=5, header=["clade", "NCBI_taxid", "abundance", "additional_species"])
    end
    Arrow.write("taxonomic_profiles.arrow", profiles)
    rm("biobakery3", recursive=true, force=true)
    rm("download", force=true)  # we don't know where this file comes from but we want it gone
end

register(DataDep(
   "taxonomic_profiles",
   """
   Taxonomic profiles generated by MetaPhlAn.
   """,
   "https://osf.io/kyh48/download",
#    post_fetch_method = post_fetch_taxa
   ),
)
