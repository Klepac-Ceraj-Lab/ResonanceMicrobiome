---
title: "Notebook 8: Metagenomes Functional Profiles"
author: "Kevin Bonham, PhD"
options:
    line_width : 120
    wrap : false
---

Now we've been through some analyses of the taxonomic profiles,
but metagenomes *also* allow the generation of functional profiles;
that is, what genes are present in a given community.

These profiles were generated with [HUMANn2](http://huttenhower.sph.harvard.edu/humann2).

```julia; results="hidden"
using Pkg
Pkg.activate("analysis/")
using Revise
```
```julia; echo=false; results="hidden"
ENV["GKSwstype"] = "100" # hide

using ECHOAnalysis
using Microbiome
using BiobakeryUtils
using SQLite
using Statistics
using StatsBase
using StatsPlots
using DataFrames
using Distances
using PrettyTables
using MultivariateStats
using HypothesisTests
using MultipleTesting
using Interpolations
using ProgressMeter
using CSV

rounder = Dict(0 => (v,i) -> typeof(v) <: AbstractFloat ? round(v,digits=4) : v)
# print ~15 random rows
randrowfilter(data, i) = rand() < (1 / size(data, 1)) * 15
@ptconfclean # clear previous configuration
@ptconf formatter = rounder nosubheader=true screen_size=(20,120) filters_row=(randrowfilter,)

includet("accessories.jl")

config = Pkg.TOML.parsefile("data/data.toml")
figures = config["output"]["figures"]
tables = config["output"]["tables"]
isdir(figures) || mkpath(figures)
isdir(tables) || mkpath(tables)
```

There are a few different ways to classify genes,
some of which capture more of the total sequence space than others.
For example, UniProt's UniRef90 groupings
capture basically everything that's ever been sequenced before,
but many of those labels have no actual information associated with them.
By contrast, InterPro's `PFam` and Kegg Orthology (KO) databases
are much smaller, but each annotation has some information associated with it.

This also means that the uniref90 tables are _much_ larger.

```julia
unirefdb = SQLite.DB(config["sqlite"]["uniref90"]["path"])
unirefs = sqlprofile(unirefdb, tablename="genefamilies_relab", kind="genefamilies_relab")
```


```julia; results="hidden"
samples = stoolsample.(samplenames(unirefs))
widemeta = getmgxmetadata(samples=samples)
let notmissingage = .!ismissing.(widemeta.ageLabel)
    global samples = samples[notmissingage]
    global widemeta = widemeta[notmissingage, :]
    global unirefs = view(unirefs, sites=notmissingage) |> copy
end

#Get unique samples for each subject and subset by type
kidallsamples = uniquetimepoints(samples, samplefilter=iskid)
momallsamples = uniquetimepoints(samples, samplefilter=ismom)
kidallmeta = getmgxmetadata(samples=kidallsamples)
momallmeta = getmgxmetadata(samples=momallsamples)
```

```julia
moms = view(unirefs, sites=sampleid.(momallsamples))
moms = view(moms, species= map(row-> !all(isequal(0.), row), eachrow(occurrences(moms))))

kids = view(unirefs, sites = map(s-> s in kidallmeta.sample, sitenames(unirefs)))
kids = view(kids, species= map(row-> !all(isequal(0.), row), eachrow(occurrences(kids))))
```

Because the microbial taxonomic diversity increases with age,
we also expect the gene diversity to increase.
We can just look at the total number of genes by age:

```julia
# get matrix of gene abundances
occ = occurrences(kids)

occ_srt = view(occ, :, sortperm(kidallmeta.correctedAgeDays))

num_genes = map(col-> sum(x-> x > 0, col), eachcol(occ_srt))
scatter(sort(kidallmeta.correctedAgeDays ./ 365), num_genes,
    legend=false, xlabel="Age (days)", ylabel="Identified UniRef90s",
    title="Genes by age", color=:lightgrey)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_num_genes_age.svg"))
```
```julia
taxdb = SQLite.DB(config["sqlite"]["taxa"]["path"])
species = sqlprofile(taxdb, tablename="taxa", kind="species")
species = view(species, sites=sitenames(kids))
spec_occ = occurrences(species)
spec_occ_srt = view(spec_occ, :, sortperm(kidallmeta.correctedAgeDays))
num_spec = map(col-> sum(x-> x > 0, col), eachcol(spec_occ_srt))

scatter(num_spec, num_genes,
    primary=false, xlabel="N species", ylabel="Identified UniRef90s",
    title="Genes by age", zcolor=sort(kidallmeta.correctedAgeDays ./ 365), color=:plasma)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "n-genes-vs-species-age.svg"))
```
```julia
scatter(num_spec, num_genes,
    xlabel="N species", ylabel="Identified UniRef90s",
    title="Genes by age", group=String.(sort(kidallmeta, :correctedAgeDays).ageLabel),
    legend=:left, color=color2')
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "n-genes-vs-species-ageLabel.svg"))
```


Going forward, we don't *really* care about genes that are very rare,
or are present in nearly everyone.
So I'll filter out genes that are present in < 5%
or more than 90% of samples.
And I'm reassigning the variables rather than using views
just because the original table is so enormous.


```julia; results="hidden"
Microbiome.prevalence(a, minabundance::Float64=0.0001) = mean(x-> present(x, minabundance), (y for y in a))

prevfilt = map(eachrow(occurrences(unirefs))) do row
    u1_prev = prevalence(row[map(x-> x == "1 and under", widemeta.ageLabel)], 0.)
    o1_prev = prevalence(row[map(x-> x != "mom" && x != "1 and under", widemeta.ageLabel)], 0.)
    mom_prev = prevalence(row[map(x-> x == "mom", widemeta.ageLabel)], 0.)

    return (any(>(0.05), [u1_prev, o1_prev, mom_prev]), all(<(0.9), [u1_prev, o1_prev, mom_prev]) )
end

prevalent = view(unirefs, species=[p[1] for p in prevfilt])
accessory = view(unirefs, species=map(all, prevfilt))
```

Here's our typical PCoA:

```julia
dm = pairwise(BrayCurtis(), prevalent)
mds = fit(MDS, dm, distances=true)
plot(mds, group=widemeta.ageLabel, color=color3',
    legend=:bottomright, title="All genes, All samples", markersize=3)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_all_genes_agelabel_pcoa.svg"))
```

```julia
dm = pairwise(BrayCurtis(), accessory)
mds = fit(MDS, dm, distances=true)
plot(mds, group=widemeta.ageLabel, color=color3', markersize=3,
    legend=:bottomright, title="Accessory genes, All samples")
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_accessory_genes_agelabel_pcoa.svg"))
```

```julia
plot(mds, group=widemeta.ageLabel, primary=false, markersize=3, zcolor=:BrGB,
    title="Identified genes, All samples")
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_identified_genes_agelabel_pcoa.svg"))
```

Until now, I've been looking at all samples.
Here, let's filter down to only the first sample for each subject.

```julia
ukidsamples = uniquetimepoints(kidallsamples, takefirst=true)
umomsamples = uniquetimepoints(momallsamples, takefirst=true)

uprevalent = view(prevalent, sites=sampleid.([ukidsamples; umomsamples]))
umeta = getmgxmetadata(samples=[ukidsamples; umomsamples])
dm = pairwise(BrayCurtis(), uprevalent)
mds = fit(MDS, dm, distances=true)

plot(mds, group=umeta.ageLabel, color=color3',
    legend=:topright, title="Prevalent genes, first samples")
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_all_genes_unique_agelabel_pcoa.svg"))
```

```julia
uaccessory = view(accessory, sites=sampleid.([ukidsamples;umomsamples]))
dm = pairwise(BrayCurtis(), uaccessory)
mds = fit(MDS, dm, distances=true)

scatter(projection(mds)[:,1], projection(mds)[:,3], group = umeta.ageLabel)
ev = eigvals(mds)
var_explained = [v / sum(ev) for v in ev]


plot(mds, group=umeta.ageLabel, color=color3',
    legend=:topright, title="Accessory genes, first samples")
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_accessory_genes_unique_agelabel_pcoa.svg"))
```

```julia
id_sum = sum(occurrences(uprevalent)[2:end,:], dims=1) |> vec
present_sum = sum(x-> present(x, 0.), occurrences(uprevalent), dims=1) |> vec

plot(mds, color=:solar, zcolor=id_sum,
    title="Accessory genes, first samples, identifiable", primary=false)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_accessory_genes_pcoa_identified_genes.svg"))
```
```julia
plot(mds, color=:BrBG, zcolor=present_sum,
    title="Accessory genes, first samples, count", primary=false)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_accessory_genes_pcoa_number_genes.svg"))
```
```julia
scatter(present_sum, id_sum, group=umeta.ageLabel, color = color3',
    xlabel="Number of genes", ylabel="Fraction of mapped genes")
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_identifiable_genes_vs_number_genes.svg"))
```

```julia
ukidsmeta = getmgxmetadata(samples=ukidsamples)
umomsmeta = getmgxmetadata(samples=umomsamples)

umoms = view(uaccessory, sites=sampleid.(umomsamples))
ukids = view(uaccessory, sites=map(s-> s in ukidsmeta.sample, sitenames(uaccessory)))

umoms = copy(view(umoms, species = map(row-> any(x-> x > 0, row), eachrow(occurrences(umoms)))))
ukids = copy(view(ukids, species = map(row-> any(x-> x > 0, row), eachrow(occurrences(ukids)))))

occ = occurrences(ukids)
@assert !any(row-> all(isequal(0.), row), eachrow(occ))
```

## Looking for associations

If we just pulled a bunch of genes at random,
we'd expect some of them to positively or negatively correlate
with our subject covariates.
Probably, they'd have a normal distribution of correlations.

```julia
agecors = cor(ukidsmeta.correctedAgeDays, occ, dims=2)'
agecors = [isnan(c) ? 0 : c for c in agecors]
agerank = sortperm(agecors)
describe(agecors)
```
```julia
itp = LinearInterpolation(eachindex(agecors), agecors[agerank])

plot(itp([range(1, stop=length(itp), length=100)]...),
    xlabel="rank", ylabel="Pearson correlation with age", label="all genes",
    color=color1[2], legend=:bottomright, title="UniRef90 age correlations")
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_uniref90_age_correlations.svg"))
```

Rather than doing a statistical test on each gene function directly,
we can do a variant of "feature set enrichment analysis" (FSEA).
Here, we use a statistical test called a Mann-Whitney U test
to ask if a set of genes as a whole (say, antibiotic resistance genes)
tend to be positively or negatively correlated with age.

If any given antibiotic resistance gene is as likely
to be positively correlated with age as negatively correlated,
we'd be less confident that any given correlation is "real",
it could just be random.
But if all or even most AbxR genes fall on one side,
we can be more confident that there's something interesting to look at.

This set of AbxR genes comes from UniProt.

```julia
abxr = CSV.read("data/uniprot/uniprot-abxr.tsv")

features = match.(r"UniRef90_(\w+)", featurenames(ukids))
@assert length(features) == length(agecors)
@assert all(!isnothing, features)
features = [m.captures[1] for m in features]

searchset = Set(abxr.Entry)
abx_pos = findall(x-> x in searchset, features)
mwu = MannWhitneyUTest(agecors[abx_pos], agecors[Not(abx_pos)])
```
```julia
m = round(median(agecors[abx_pos]), sigdigits=4)
p = round(pvalue(mwu), sigdigits=4)

plot(range(1, stop=length(itp), length=100), itp(range(1, stop=length(itp), length=100)),
    xlabel="rank", ylabel="Pearson correlation with age", legend=:bottomright,
    label="all genes", color=color1[2], title = "UniRef90 age correlations")
scatter!(invperm(agerank)[abx_pos], agecors[abx_pos], color=color1[3], label="abxR genes",
    legend=:bottomright)
annotate!(1000, 0.3, "median = $m\npvalue=$p", :left)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_uniref90_age_correlations_abxR.svg"))
```

The following code can be uncommented to do a random permutation test
to show that if genes are selected at random,
the pvalues are uniformaly distributed as expected.
The code here is not run because it takes a really long time.

```julia
# # test some random samples
# ps = Float64[]
#
# for _ in 1:5000
#     s = sample(1:length(agecors), 50)
#     push!(ps, pvalue(MannWhitneyUTest(agecors[s], agecors[Not(s)])))
# end
#
# histogram(ps, legend=false, title="Random gene subsets (5k)", xlabel="p-value", ylabel="number")
```
```julia; echo=false; results="hidden"
# savefig(joinpath(figures, "08_uniref90_age_correlations_random_histogram.svg"))
```

We can do the same test for carbohydrate metabolims genes from UniProt...

```julia
carbs = CSV.read("data/uniprot/uniprot-carbohydrate.tsv")
searchset = Set(carbs.Entry)
carbs_pos = findall(x-> x in searchset, features)
mwu = MannWhitneyUTest(agecors[carbs_pos], agecors[Not(carbs_pos)])
```
```julia
m = round(median(agecors[carbs_pos]), sigdigits=4)
p = round(pvalue(mwu), sigdigits=4)
plot(range(1, stop=length(itp), length=100), itp(range(1, stop=length(itp), length=100)),
    xlabel="rank", ylabel="Pearson correlation with age", legend=:bottomright,
        label="all genes", color=color1[2], title = "UniRef90 age correlations")

scatter!(invperm(agerank)[carbs_pos], agecors[carbs_pos], color=color1[4], label="Carbohydrate metabolism genes")
annotate!(1000, 0.3, "median = $m\npvalue=$p", :left)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_uniref90_age_correlations_carbs.svg"))
```

... and fatty acid metabolism genes.

```julia
fa = CSV.read("data/uniprot/uniprot-fa.tsv")
searchset = Set(fa.Entry)
fa_pos = findall(x-> x in searchset, features)
mwu = MannWhitneyUTest(agecors[fa_pos], agecors[Not(fa_pos)])
```
```julia
m = round(median(agecors[fa_pos]), sigdigits=4)
p = round(pvalue(mwu), sigdigits=4)
plot(range(1, stop=length(itp), length=100), itp(range(1, stop=length(itp), length=100)),
    xlabel="rank", ylabel="Pearson correlation with age", legend=:bottomright,
        label="all genes", color=color1[2], title = "UniRef90 age correlations")

scatter!(invperm(agerank)[fa_pos], agecors[fa_pos], color=color1[5], label="Fatty Acid metabolism genes")
annotate!(1000, 0.3, "median = $m\npvalue=$p", :left)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_uniref90_age_correlations_fas.svg"))
```

### Reproducibility of previous findings

Vatanen et. al. 2018 investigated the metagenomes
of a different cohort of children
to test for associations with risk of developing Type I diabetes.
In figure 3 of this paper,
they showed a number of enzyme classes that were associated
with the age of children.
We can map these enzype classes (ECs) to UniRef90s as gene sets,
and test if they are also associated with age in our cohort


```julia
ecs2uniref = Dict()
for line in eachline("data/engaging/ec2uniref90.txt")
    line = split(line, '\t')
    ecs2uniref[line[1]] = map(x-> String(match(r"UniRef90_(\w+)", x).captures[1]), line[2:end])
end
```

```julia
pos_control = let pc = []
    @showprogress for ec in ("6.1.1.18", "2.8.4.4", "2.2.1.1", "2.7.1.144", "2.3.1.179", "5.4.2.12",
               "2.7.1.26", "2.7.1.11", "4.1.1.49", "2.6.1.83", "2.3.1.51", "1.7.99.1",
               "2.5.1.3", "1.7.99.1", "2.4.1.21", "2.5.1.3","4.1.99.17","2.7.1.90",
               "3.4.24.78","2.5.1.49","1.4.1.14", "4.1.1.3")
         searchset = Set(ecs2uniref[ec])
         pos = findall(x-> x in searchset, features)
         mwu = MannWhitneyUTest(agecors[pos], agecors[Not(pos)])
         push!(pc, (median(agecors[pos]), pvalue(mwu)))
    end
    pc
end

# what fraction of these genes are + correlated?
count(x-> x[1] > 0, pos_control) / length(pos_control)
```
```julia
# what fraction of these genes are + correlated and significant?
count(x-> x[1] > 0 && x[2] < 0.01, pos_control) / length(pos_control)
```

```julia
neg_control = let nc = []
    @showprogress for ec in ("3.6.1.1","2.7.7.56","2.6.1.42","3.1.22.4","1.6.1.2","1.1.1.44","5.4.2.11",
               "6.3.4.18","6.3.1.2","2.3.1.117","5.3.1.6","4.2.1.1","2.7.7.72","2.5.1.74",
               "2.3.1.54","4.4.1.8","2.7.1.15","1.11.1.15","6.3.4.14")
       searchset = ecs2uniref[ec]
       pos = findall(x-> x in searchset, features)
       mwu = MannWhitneyUTest(agecors[pos], agecors[Not(pos)])
       push!(nc, (median(agecors[pos]), pvalue(mwu)))
   end
   nc
end

# what fraction of these genes are - correlated?
count(x-> x[1] < 0, neg_control) / length(neg_control)
```
```julia
# what fraction of these genes are - correlated and significant?
count(x-> x[1] < 0 && x[2] < 0.01, neg_control) / length(neg_control)
```

# KOs

In Valles-Colomer et. al., 2019,
a number of "neuroactive" microbial genes were identified.
They are identified by their Kegg-Orthology (KO) codes,
which we can also conveniently load:

```julia; results="hidden"
kodb = SQLite.DB(config["sqlite"]["ko"]["path"])
kos = sqlprofile(kodb, tablename="ko_names_relab", kind="ko_names_relab")

ukos = view(kos, sites=sampleid.([ukidsamples; umomsamples]))

kos_moms = view(ukos, sites=sampleid.(umomsamples))
kos_kids = view(ukos, sites = map(s-> s in ukidsmeta.sample, sitenames(ukos)))
```

## Getting neuroactive KOs

The supplementary data from that paper is in a slightly odd format,
but can be easily parsed to pull out the codes we want

```julia; results="hidden"
neuroactive = Dict()

let (mgb, desc) = ("", "")
    for line in eachline("data/uniprot/gbm.txt")
        line = split(line, r"[\t,]")
        if startswith(line[1], "MGB")
            (mgb, desc) = line
            desc = rstrip(replace(desc, r"\bI+\b.*$"=>""))
            desc = replace(desc, r" \([\w\s]+\)$"=>"")
            desc = replace(desc, r"^.+ \(([\w\-]+)\) (.+)$"=>s"\1 \2")
            if desc in keys(neuroactive)
                push!(neuroactive[desc].mgbs, mgb)
            else
                neuroactive[desc] = (mgbs=[mgb], kos=String[])
            end
        else
            filter!(l-> occursin(r"^K\d+$", l), line)
            append!(neuroactive[desc].kos, String.(line))
        end
    end
end
```

And we can convert those KOs to UniRef90s to get our gene set.

```julia
neuroactive_pos = findall(f-> f in na_uniref, features)
mwu = MannWhitneyUTest(agecors[neuroactive_pos], agecors[Not(neuroactive_pos)])
```
```julia
m = round(median(agecors[neuroactive_pos]), sigdigits=4)
p = round(pvalue(mwu), sigdigits=3)

plot(range(1, stop=length(itp), length=100), itp(range(1, stop=length(itp), length=100)),
    xlabel="rank", ylabel="Pearson correlation with age", legend=:bottomright,
        label="all genes", color=color1[2], title = "UniRef90 age correlations")

scatter!(invperm(agerank)[neuroactive_pos], agecors[neuroactive_pos],
    markersize=4, color=color1[5],
    label="All neuroactive genes")
annotate!(1000, 0.3, "median = $m\npvalue=$p", :left)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_uniref90_age_correlations_neuroactive.svg"))
```



```julia
na = view(unirefs, species=neuroactive_pos)
widemeta.neuroactive_sum = sum(occurrences(na), dims=1) |> vec
widemeta.identified_sum = sum(occurrences(unirefs)[3:end, :], dims=1) |> vec

@assert all(map(x-> isapprox(1., x, rtol=8), sum(occurrences(unirefs), dims=1) |> vec))

dm = pairwise(BrayCurtis(), unirefs)
mds = fit(MDS, dm, distances=true)
plot(mds, zcolor=log.(widemeta.identified_sum), color=:BrBG,
    title="Identified genes, all samples", primary=false, ticks=false)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_identified_genes_pcoa.svg"))
```
```julia
plot(mds, zcolor=log.(widemeta.neuroactive_sum ./ widemeta.identified_sum), color=:solar,
    title="Neuroactive genes, all samples", primary=false)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_neuroactive_genes_pcoa.svg"))
```
```julia
dm = pairwise(BrayCurtis(), accessory)
mds = fit(MDS, dm, distances=true)
plot(mds, zcolor=log.(widemeta.identified_sum), color=:solar,
    title="Identified genes, all samples", primary=false)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_identified_accessory_genes_pcoa.svg"))
```
```julia
plot(mds, zcolor=log.(widemeta.neuroactive_sum ./ widemeta.identified_sum), color=:solar,
    title="Neuroactive genes, all samples", primary=false)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_identified_genes_accessory_pcoa.svg"))
```

```julia
kids_napos = findall(f-> f in na_uniref, features)
nakids = view(ukids, species=kids_napos)
ukidsmeta.neuroactive_sum = sum(occurrences(nakids), dims=1) |> vec
ukidsmeta.total_accessory = sum(occurrences(ukids), dims=1) |> vec
dm = pairwise(BrayCurtis(), ukids)
mds = fit(MDS, dm, distances=true)

plot(mds, zcolor=log.(ukidsmeta.neuroactive_sum ./ ukidsmeta.total_accessory), color=:solar,
    title="Neuroactive genes, kids samples", primary=false)
```

```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_neuroactive_kids_pcoa.svg"))
```

```julia
plot(mds, group=ukidsmeta.ageLabel, color=color3',
    title="Kids age labels functions")
```

```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_kids_functions_agelabel_pcoa.svg"))
```

Checking all of the neuroactive categories in our childhood cohort:

```julia
agenadf = DataFrame(description=String[], n_unirefs = Int[], median=Float64[], pvalue=Float64[], idx=[])

@showprogress for (desc, (mgbs, kos)) in neuroactive
    urs = []
    for ko in kos
        ko in keys(kos2uniref) && append!(urs, kos2uniref[ko])
    end
    urs = Set(urs)
    pos = findall(f-> f in urs, features)

    n = length(pos)
    n > 2 || continue

    mwu = MannWhitneyUTest(agecors[pos], agecors[Not(pos)])
    m = round(median(agecors[pos]), sigdigits=4)
    p = round(pvalue(mwu), sigdigits=4)

    push!(agenadf, (desc, n, m, p, pos))
    plt = plot(range(1, stop=length(itp), length=100), itp(range(1, stop=length(itp), length=100)),
        xlabel="rank", ylabel="Pearson correlation with age", legend=:bottomright,
            label="all genes", color=color1[2], title = "UniRef90 age correlations")

    scatter!(invperm(agerank)[pos], agecors[pos],
        markersize=4, color=color1[1],
        label="$desc")
    annotate!(1000, 0.3, "n = $n\nmedian = $m\npvalue=$p", :left)
    display(plt)
    savefig(joinpath(figures, "08_uniref90_age_correlations_neuroactive_$(replace(desc, r"[^\w]+"=>'-')).svg"))
end
agenadf.qvalue = adjust(agenadf.pvalue, BenjaminiHochberg())
@pt agenadf
```
```julia
boxplot([agecors[pos] for pos in (abx_pos, carbs_pos, fa_pos, 1:length(agecors))], color=:lightgrey,
    legend=false, xticks=(1:4, ["abx", "carbs", "fa", "all"]),
    ylabel="Median Age Correlation")
```
```julia; echo=false; results="hidden"
CSV.write(joinpath(tables, "age_metab_correlations.csv"), agenadf)
```

```julia
sort!(agenadf, :median)
plt = boxplot([agecors[pos] for pos in agenadf.idx], color=:lightgrey,
    legend=false, xticks=(1:nrow(agenadf), agenadf.description), xrotation=45,
    ylabel="Median Age Correlation", size=(800,600))
for (i, row) in enumerate(eachrow(agenadf))
    if row.qvalue < 0.005
        annotate!(i, 0.47, "**", align=:center)
    # elseif row.qvalue < 0.01
    #     annotate!(i, 0.32, "**", align=:center)
elseif row.qvalue < 0.05
        annotate!(i, 0.47, "*", align=:center)
    end
end
display(plt)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_uniref90_age_correlations_neuroactive_boxplot.svg"))
```

```julia
nacols =[:sample, :subject, :timepoint, :neuroactive_sum]
@assert length(features) == nfeatures(ukids)

for row in eachrow(agenadf)
    nabt = view(ukids, species=row.idx)
    col = sum(occurrences(nabt), dims=1) |> vec
    any(x-> x > 0, col) || continue
    @info row.description
    @show length(col)
    push!(nacols, Symbol(row.description))
    ukidsmeta[!, Symbol(row.description)] = col
end

@pt ukidsmeta[!, nacols]
```
```julia; echo=false; results="hidden"
CSV.write(joinpath(tables, "08-neuroactive_genes.csv"), ukidsmeta[!, nacols])
```


# Cognitive Scores

That was correlation with age, which is interesting,
but we'd also like to know if these microbial genes
are associated with neurocognitive features in our kiddos.

```julia
cog_filter = map(row-> row.correctedAgeDays > 365 && !ismissing(row.cogScore), eachrow(ukidsmeta))
cogmeta = ukidsmeta[cog_filter, :]
cog = view(ukids, sites=cog_filter)
cog = copy(view(cog, species=map(row->any(>(0.), row), eachrow(occurrences(cog)))))

occ = occurrences(cog)

cogcors = cor(cogmeta.cogScore, occ, dims=2)'
@assert !any(isnan, cogcors)
cogrank = sortperm(cogcors)
describe(cogcors)
```


```julia
itp = LinearInterpolation(eachindex(cogcors), cogcors[cogrank])

plot(range(1, stop=length(itp), length=100), itp(range(1, stop=length(itp), length=100)),
    markersize=1, xlabel="rank", ylabel="Pearson correlation with Cognitive Score",
    label="all genes", color=color1[2], title="UniRef90 cogScore correlations", legend=:bottomright)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_uniref90_cog_correlations.svg"))
```

```julia
abxr = CSV.read("data/uniprot/uniprot-abxr.tsv")

features = match.(r"UniRef90_(\w+)", featurenames(cog))
@assert !any(isnothing, features)
features = [f.captures[1] for f in features]

searchset = Set(abxr.Entry)
abx_pos = findall(x-> x in searchset, features)
mwu = MannWhitneyUTest(cogcors[abx_pos], cogcors[Not(abx_pos)])
```
```julia
m = round(median(cogcors[abx_pos]), sigdigits=4)
p = round(pvalue(mwu), sigdigits=4)

plot(range(1, stop=length(itp), length=100), itp(range(1, stop=length(itp), length=100)),
    xlabel="rank", ylabel="Pearson correlation with cogscore", legend=:bottomright,
    label="all genes", color=color1[2], title = "UniRef90 cogscore correlations")

scatter!(invperm(cogrank)[abx_pos], cogcors[abx_pos], color=color1[3], label="abxR genes")
annotate!(1000, 0.2, "median = $m\npvalue=$p", :left)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_uniref90_cog_correlations_abxR.svg"))
```


```julia
carbs = CSV.read("data/uniprot/uniprot-carbohydrate.tsv")
searchset = Set(carbs.Entry)
carbs_pos = findall(x-> x in searchset, features)
mwu = MannWhitneyUTest(cogcors[carbs_pos], cogcors[Not(carbs_pos)])
```
```julia
m = round(median(cogcors[carbs_pos]), sigdigits=4)
p = round(pvalue(mwu), sigdigits=4)
plot(range(1, stop=length(itp), length=100), itp(range(1, stop=length(itp), length=100)),
    xlabel="rank", ylabel="Pearson correlation with cogscore", legend=:bottomright,
    label="all genes", color=color1[2], title = "UniRef90 cogscore correlations")
scatter!(invperm(cogrank)[carbs_pos], cogcors[carbs_pos], color=color1[4], label="Carbohydrate metabolism genes")
annotate!(1000, 0.2, "median = $m\npvalue=$p", :left)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_uniref90_cog_correlations_carbs.svg"))
```

```julia
fa = CSV.read("data/uniprot/uniprot-fa.tsv")
searchset = Set(fa.Entry)
fa_pos = findall(x-> x in searchset, features)
mwu = MannWhitneyUTest(cogcors[fa_pos], cogcors[Not(fa_pos)])
```
```julia
m = round(median(cogcors[fa_pos]), sigdigits=4)
p = round(pvalue(mwu), sigdigits=4)
plot(range(1, stop=length(itp), length=100), itp(range(1, stop=length(itp), length=100)),
    xlabel="rank", ylabel="Pearson correlation with cogscore", legend=:bottomright,
    label="all genes", color=color1[2], title = "UniRef90 cogscore correlations")
scatter!(invperm(cogrank)[fa_pos], cogcors[fa_pos], color=color1[5], label="Fatty Acid metabolism genes")
annotate!(1000, 0.2, "median = $m\npvalue=$p", :left)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_uniref90_cog_correlations_fas.svg"))
```

```julia; results="hidden"
cognadf = DataFrame(description=String[], n_unirefs = Int[], median=Float64[], pvalue=Float64[], idx=[])

@showprogress for (desc, (mgbs, kos)) in neuroactive
    urs = []
    for ko in kos
        ko in keys(kos2uniref) && append!(urs, kos2uniref[ko])
    end
    urs = Set(urs)
    pos = findall(f-> f in urs, features)

    n = length(pos)
    n > 2 || continue

    mwu = MannWhitneyUTest(cogcors[pos], cogcors[Not(pos)])
    m = round(median(cogcors[pos]), sigdigits=4)
    p = round(pvalue(mwu), sigdigits=4)

    push!(cognadf, (desc, n, m, p, pos))
    plt = plot(range(1, stop=length(itp), length=100), itp(range(1, stop=length(itp), length=100)),
        xlabel="rank", ylabel="Pearson correlation with cogscore", legend=:bottomright,
        label="all genes", color=color1[2], title = "UniRef90 cogscore correlations")
    scatter!(invperm(cogrank)[pos], cogcors[pos],
        markersize=4, color=color1[1],
        label="$desc")
    annotate!(1000, 0.2, "n = $n\nmedian = $m\npvalue=$p", :left)
    display(plt)
    savefig(joinpath(figures, "08_uniref90_cog_correlations_neuroactive_$(replace(desc, r"[^\w]+"=>'-')).svg"))
end
cognadf.qvalue = adjust(cognadf.pvalue, BenjaminiHochberg())
@pt cognadf
```
```julia; echo=false; results="hidden"
CSV.write(joinpath(tables, "08-cogscore_neuroactive_correlations.csv"), cognadf)
```
```julia
boxplot([cogcors[pos] for pos in (abx_pos, carbs_pos, fa_pos, 1:length(cogcors))], color=:lightgrey,
    legend=false, xticks=(1:4, ["abx", "carbs", "fa", "all"]),
    ylabel="Median cogScore Correlation", size=(800,600))
```
```julia
sort!(cognadf, :median)
plt = boxplot([cogcors[pos] for pos in cognadf.idx], color=:lightgrey,
    legend=false, xticks=(1:nrow(agenadf), cognadf.description), xrotation=45,
    ylabel="Median cogScore Correlation", size=(800,600))
for (i, row) in enumerate(eachrow(cognadf))
    if row.qvalue < 0.005
        annotate!(i, 0.22, "**", align=:center)
    # elseif row.qvalue < 0.01
    #     annotate!(i, 0.22, "**", align=:center)
elseif row.qvalue < 0.05
        annotate!(i, 0.22, "*", align=:center)
    end
end
display(plt)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_uniref90_cog_correlations_neuroactive_boxplot.svg"))
```



# Cortical size

```julia
neocortical_filter = map(row-> !ismissing(row.neocortical), eachrow(ukidsmeta))
neocorticalmeta = ukidsmeta[neocortical_filter, :]
neocorticalmeta.neocortical_normed = neocorticalmeta.neocortical ./ neocorticalmeta.hires_total

neocortical = view(ukids, sites=neocortical_filter)
neocortical = copy(view(neocortical, species=map(row->any(>(0.), row), eachrow(occurrences(neocortical)))))

occ = occurrences(neocortical)

neocorticalcors = cor(neocorticalmeta.neocortical_normed, occ, dims=2)'
@assert !any(isnan, neocorticalcors)
neocorticalrank = sortperm(neocorticalcors)
describe(neocorticalcors)
```


```julia
itp = LinearInterpolation(eachindex(neocorticalcors), neocorticalcors[neocorticalrank])

plot(range(1, stop=length(itp), length=100), itp(range(1, stop=length(itp), length=100)),
    markersize=1, xlabel="rank", ylabel="Pearson correlation with Cognitive Score",
    label="all genes", color=color1[2], title="UniRef90 neocortical_normed correlations", legend=:bottomright)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_uniref90_neocortical_correlations.svg"))
```

```julia; results="hidden"
features = match.(r"UniRef90_(\w+)", featurenames(neocortical))
@assert !any(isnothing, features)
features = [f.captures[1] for f in features]

neocorticalnadf = DataFrame(description=String[], n_unirefs = Int[], median=Float64[], pvalue=Float64[], idx=[])

@showprogress for (desc, (mgbs, kos)) in neuroactive
    urs = []
    for ko in kos
        ko in keys(kos2uniref) && append!(urs, kos2uniref[ko])
    end
    urs = Set(urs)
    pos = findall(f-> f in urs, features)

    n = length(pos)
    n > 2 || continue

    mwu = MannWhitneyUTest(neocorticalcors[pos], neocorticalcors[Not(pos)])
    m = round(median(neocorticalcors[pos]), sigdigits=4)
    p = round(pvalue(mwu), sigdigits=4)

    push!(neocorticalnadf, (desc, n, m, p, pos))
    plt = plot(range(1, stop=length(itp), length=100), itp(range(1, stop=length(itp), length=100)),
        xlabel="rank", ylabel="Pearson correlation with neocortical_normed", legend=:bottomright,
        label="all genes", color=color1[2], title = "UniRef90 neocortical_normed correlations")
    scatter!(invperm(neocorticalrank)[pos], neocorticalcors[pos],
        markersize=4, color=color1[1],
        label="$desc")
    annotate!(1000, 0.2, "n = $n\nmedian = $m\npvalue=$p", :left)
    display(plt)
    savefig(joinpath(figures, "08_uniref90_neocortical_correlations_neuroactive_$(replace(desc, r"[^\w]+"=>'-')).svg"))
end
neocorticalnadf.qvalue = adjust(neocorticalnadf.pvalue, BenjaminiHochberg())
@pt neocorticalnadf
```
```julia; echo=false; results="hidden"
CSV.write(joinpath(tables, "08-neocortical_normed_neuroactive_correlations.csv"), neocorticalnadf)
```
```julia
sort!(neocorticalnadf, :median)
plt = boxplot([neocorticalcors[pos] for pos in neocorticalnadf.idx], color=:lightgrey,
    legend=false, xticks=(1:nrow(agenadf), neocorticalnadf.description), xrotation=45,
    ylabel="Median neocortical_normed Correlation", size=(800,600))
for (i, row) in enumerate(eachrow(neocorticalnadf))
    if row.qvalue < 0.005
        annotate!(i, 0.3, "**", align=:center)
    # elseif row.qvalue < 0.01
    #     annotate!(i, 0.3, "**", align=:center)
elseif row.qvalue < 0.05
        annotate!(i, 0.3, "*", align=:center)
    end
end
display(plt)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_uniref90_neocortical_correlations_neuroactive_boxplot.svg"))
```


# Subcortical size

```julia
subcortical_filter = map(row-> !ismissing(row.subcortical), eachrow(ukidsmeta))
subcorticalmeta = ukidsmeta[subcortical_filter, :]
subcorticalmeta.subcortical_normed = subcorticalmeta.subcortical ./ subcorticalmeta.hires_total

subcortical = view(ukids, sites=subcortical_filter)
subcortical = copy(view(subcortical, species=map(row->any(>(0.), row), eachrow(occurrences(subcortical)))))

occ = occurrences(subcortical)

subcorticalcors = cor(subcorticalmeta.subcortical_normed, occ, dims=2)'
@assert !any(isnan, subcorticalcors)
subcorticalrank = sortperm(subcorticalcors)
describe(subcorticalcors)
```


```julia
itp = LinearInterpolation(eachindex(subcorticalcors), subcorticalcors[subcorticalrank])

plot(range(1, stop=length(itp), length=100), itp(range(1, stop=length(itp), length=100)),
    markersize=1, xlabel="rank", ylabel="Pearson correlation with Cognitive Score",
    label="all genes", color=color1[2], title="UniRef90 subcortical_normed correlations", legend=:bottomright)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_uniref90_subcortical_correlations.svg"))
```

```julia; results="hidden"
features = match.(r"UniRef90_(\w+)", featurenames(subcortical))
@assert !any(isnothing, features)
features = [f.captures[1] for f in features]

subcorticalnadf = DataFrame(description=String[], n_unirefs = Int[], median=Float64[], pvalue=Float64[], idx=[])

@showprogress for (desc, (mgbs, kos)) in neuroactive
    urs = []
    for ko in kos
        ko in keys(kos2uniref) && append!(urs, kos2uniref[ko])
    end
    urs = Set(urs)
    pos = findall(f-> f in urs, features)

    n = length(pos)
    n > 2 || continue

    mwu = MannWhitneyUTest(subcorticalcors[pos], subcorticalcors[Not(pos)])
    m = round(median(subcorticalcors[pos]), sigdigits=4)
    p = round(pvalue(mwu), sigdigits=4)

    push!(subcorticalnadf, (desc, n, m, p, pos))
    plt = plot(range(1, stop=length(itp), length=100), itp(range(1, stop=length(itp), length=100)),
        xlabel="rank", ylabel="Pearson correlation with subcortical_normed", legend=:bottomright,
        label="all genes", color=color1[2], title = "UniRef90 subcortical_normed correlations")
    scatter!(invperm(subcorticalrank)[pos], subcorticalcors[pos],
        markersize=4, color=color1[1],
        label="$desc")
    annotate!(1000, 0.2, "n = $n\nmedian = $m\npvalue=$p", :left)
    display(plt)
    savefig(joinpath(figures, "08_uniref90_subcortical_correlations_neuroactive_$(replace(desc, r"[^\w]+"=>'-')).svg"))
end
subcorticalnadf.qvalue = adjust(subcorticalnadf.pvalue, BenjaminiHochberg())
@pt subcorticalnadf
```
```julia; echo=false; results="hidden"
CSV.write(joinpath(tables, "08-subcortical_normed_neuroactive_correlations.csv"), subcorticalnadf)
```
```julia
sort!(subcorticalnadf, :median)
plt = boxplot([subcorticalcors[pos] for pos in subcorticalnadf.idx], color=:lightgrey,
    legend=false, xticks=(1:nrow(agenadf), subcorticalnadf.description), xrotation=45,
    ylabel="Median subcortical_normed Correlation", size=(800,600))
for (i, row) in enumerate(eachrow(subcorticalnadf))
    if row.qvalue < 0.005
        annotate!(i, 0.45, "**", align=:center)
    # elseif row.qvalue < 0.01
    #     annotate!(i, 0.3, "**", align=:center)
elseif row.qvalue < 0.05
        annotate!(i, 0.45, "*", align=:center)
    end
end
display(plt)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_uniref90_subcortical_correlations_neuroactive_boxplot.svg"))
```

# Limbic size

```julia
limbic_filter = map(row-> !ismissing(row.limbic), eachrow(ukidsmeta))
limbicmeta = ukidsmeta[limbic_filter, :]

limbicmeta.limbic_normed = limbicmeta.limbic ./ limbicmeta.hires_total

limbic = view(ukids, sites=limbic_filter)
limbic = copy(view(limbic, species=map(row->any(>(0.), row), eachrow(occurrences(limbic)))))

occ = occurrences(limbic)

limbiccors = cor(limbicmeta.limbic_normed, occ, dims=2)'
@assert !any(isnan, limbiccors)
limbicrank = sortperm(limbiccors)
describe(limbiccors)
```


```julia
itp = LinearInterpolation(eachindex(limbiccors), limbiccors[limbicrank])

plot(range(1, stop=length(itp), length=100), itp(range(1, stop=length(itp), length=100)),
    markersize=1, xlabel="rank", ylabel="Pearson correlation with Cognitive Score",
    label="all genes", color=color1[2], title="UniRef90 limbic_normed correlations", legend=:bottomright)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_uniref90_limbic_correlations.svg"))
```

```julia; results="hidden"
features = match.(r"UniRef90_(\w+)", featurenames(limbic))
@assert !any(isnothing, features)
features = [f.captures[1] for f in features]

limbicnadf = DataFrame(description=String[], n_unirefs = Int[], median=Float64[], pvalue=Float64[], idx=[])

@showprogress for (desc, (mgbs, kos)) in neuroactive
    urs = []
    for ko in kos
        ko in keys(kos2uniref) && append!(urs, kos2uniref[ko])
    end
    urs = Set(urs)
    pos = findall(f-> f in urs, features)

    n = length(pos)
    n > 2 || continue

    mwu = MannWhitneyUTest(limbiccors[pos], limbiccors[Not(pos)])
    m = round(median(limbiccors[pos]), sigdigits=4)
    p = round(pvalue(mwu), sigdigits=4)

    push!(limbicnadf, (desc, n, m, p, pos))
    plt = plot(range(1, stop=length(itp), length=100), itp(range(1, stop=length(itp), length=100)),
        xlabel="rank", ylabel="Pearson correlation with limbic_normed", legend=:bottomright,
        label="all genes", color=color1[2], title = "UniRef90 limbic_normed correlations")
    scatter!(invperm(limbicrank)[pos], limbiccors[pos],
        markersize=4, color=color1[1],
        label="$desc")
    annotate!(1000, 0.2, "n = $n\nmedian = $m\npvalue=$p", :left)
    display(plt)
    savefig(joinpath(figures, "08_uniref90_limbic_correlations_neuroactive_$(replace(desc, r"[^\w]+"=>'-')).svg"))
end
limbicnadf.qvalue = adjust(limbicnadf.pvalue, BenjaminiHochberg())
@pt limbicnadf
```
```julia; echo=false; results="hidden"
CSV.write(joinpath(tables, "08-limbic_normed_neuroactive_correlations.csv"), limbicnadf)
```
```julia
sort!(limbicnadf, :median)
plt = boxplot([limbiccors[pos] for pos in limbicnadf.idx], color=:lightgrey,
    legend=false, xticks=(1:nrow(agenadf), limbicnadf.description), xrotation=45,
    ylabel="Median limbic_normed Correlation")
for (i, row) in enumerate(eachrow(limbicnadf))
    if row.qvalue < 0.005
        annotate!(i, 0.6, "**", align=:center)
    # elseif row.qvalue < 0.01
    #     annotate!(i, 0.6, "**", align=:center)
elseif row.qvalue < 0.05
        annotate!(i, 0.6, "*", align=:center)
    end
end
display(plt)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_uniref90_limbic_correlations_neuroactive_boxplot.svg"))
```
# Cerebellar size

```julia
cerebellar_filter = map(row-> !ismissing(row.cerebellar), eachrow(ukidsmeta))
cerebellarmeta = ukidsmeta[cerebellar_filter, :]
cerebellarmeta.cerebellar_normed = cerebellarmeta.cerebellar ./ cerebellarmeta.hires_total

cerebellar = view(ukids, sites=cerebellar_filter)
cerebellar = copy(view(cerebellar, species=map(row->any(>(0.), row), eachrow(occurrences(cerebellar)))))

occ = occurrences(cerebellar)

cerebellarcors = cor(cerebellarmeta.cerebellar_normed, occ, dims=2)'
@assert !any(isnan, cerebellarcors)
cerebellarrank = sortperm(cerebellarcors)
describe(cerebellarcors)
```


```julia
itp = LinearInterpolation(eachindex(cerebellarcors), cerebellarcors[cerebellarrank])

plot(range(1, stop=length(itp), length=100), itp(range(1, stop=length(itp), length=100)),
    markersize=1, xlabel="rank", ylabel="Pearson correlation with Cognitive Score",
    label="all genes", color=color1[2], title="UniRef90 cerebellar_normed correlations", legend=:bottomright)
```

```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_uniref90_cerebellar_correlations.svg"))
```

```julia; results="hidden"
features = match.(r"UniRef90_(\w+)", featurenames(cerebellar))
@assert !any(isnothing, features)
features = [f.captures[1] for f in features]

cerebellarnadf = DataFrame(description=String[], n_unirefs = Int[], median=Float64[], pvalue=Float64[], idx=[])

@showprogress for (desc, (mgbs, kos)) in neuroactive
    urs = []
    for ko in kos
        ko in keys(kos2uniref) && append!(urs, kos2uniref[ko])
    end
    urs = Set(urs)
    pos = findall(f-> f in urs, features)

    n = length(pos)
    n > 2 || continue

    mwu = MannWhitneyUTest(cerebellarcors[pos], cerebellarcors[Not(pos)])
    m = round(median(cerebellarcors[pos]), sigdigits=4)
    p = round(pvalue(mwu), sigdigits=4)

    push!(cerebellarnadf, (desc, n, m, p, pos))
    plt = plot(range(1, stop=length(itp), length=100), itp(range(1, stop=length(itp), length=100)),
        xlabel="rank", ylabel="Pearson correlation with cerebellar_normed", legend=:bottomright,
        label="all genes", color=color1[2], title = "UniRef90 cerebellar_normed correlations")
    scatter!(invperm(cerebellarrank)[pos], cerebellarcors[pos],
        markersize=4, color=color1[1],
        label="$desc")
    annotate!(1000, 0.2, "n = $n\nmedian = $m\npvalue=$p", :left)
    display(plt)
    savefig(joinpath(figures, "08_uniref90_cerebellar_correlations_neuroactive_$(replace(desc, r"[^\w]+"=>'-')).svg"))
end
cerebellarnadf.qvalue = adjust(cerebellarnadf.pvalue, BenjaminiHochberg())
@pt cerebellarnadf
```
```julia; echo=false; results="hidden"
CSV.write(joinpath(tables, "08-cerebellar_normed_neuroactive_correlations.csv"), cerebellarnadf)
```
```julia
sort!(cerebellarnadf, :median)
plt = boxplot([cerebellarcors[pos] for pos in cerebellarnadf.idx], color=:lightgrey,
    legend=false, xticks=(1:nrow(agenadf), cerebellarnadf.description), xrotation=45,
    ylabel="Median cerebellar_normed Correlation", size=(800,600))
for (i, row) in enumerate(eachrow(cerebellarnadf))
    if row.qvalue < 0.005
        annotate!(i, 0.3, "**", align=:center)
    # elseif row.qvalue < 0.01
    #     annotate!(i, 0.3, "**", align=:center)
elseif row.qvalue < 0.05
        annotate!(i, 0.3, "*", align=:center)
    end
end
display(plt)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_uniref90_cerebellar_correlations_neuroactive_boxplot.svg"))
```

```julia
agenadf[!,:cors] = [agecors[pos] for pos in agenadf.idx]
agenadf[!,:kind] .= "age"
cognadf[!,:cors] = [cogcors[pos] for pos in cognadf.idx]
cognadf[!,:kind] .= "cog"
neocorticalnadf[!,:cors] = [neocorticalcors[pos] for pos in neocorticalnadf.idx]
neocorticalnadf[!,:kind] .= "neocortical"
subcorticalnadf[!,:cors] = [subcorticalcors[pos] for pos in subcorticalnadf.idx]
subcorticalnadf[!,:kind] .= "subcortical"
limbicnadf[!,:cors] = [limbiccors[pos] for pos in limbicnadf.idx]
limbicnadf[!,:kind] .= "limbic"
cerebellarnadf[!,:cors] = [cerebellarcors[pos] for pos in cerebellarnadf.idx]
cerebellarnadf[!,:kind] .= "cerebellar"

allnadf = vcat(agenadf, cognadf, neocorticalnadf, subcorticalnadf, limbicnadf, cerebellarnadf)
sort!(allnadf, :description)
@pt allnadf
```
```julia; echo=false; results="hidden"
CSV.write(joinpath(tables, "all-fsea.csv"), allnadf[!, Not([:idx, :cors])])
```
```julia
mincor = minimum(vcat(allnadf.cors...))
maxcor = maximum(vcat(allnadf.cors...))

gseas = []


by(allnadf, :kind) do nadf
    k = nadf[1, :kind]
    plt = boxplot(nadf.cors, color=:lightgrey,
        legend=false, xticks=(1:nrow(nadf), nadf.description), xrotation=90,
        ylabel="Median Correlation - $(nadf[1,:kind])", ylims=(mincor, maxcor), size=(600,400))
    for (i, row) in enumerate(eachrow(nadf))
        if row.qvalue < 0.001
            annotate!(i, maxcor, "***", align=:center)
        elseif row.qvalue < 0.01
            annotate!(i, maxcor, "**", align=:center)
        elseif row.qvalue < 0.1
            annotate!(i, maxcor, "*", align=:center)
        end
    end
    display(plt)
    push!(gseas, plt)
end

median(cogcors)
median(neocorticalcors)
median(subcorticalcors)
median(limbiccors)

plot(gseas..., size=(800,2400), layout=(6,1))
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08-all-gsea-boxplot.svg"))
```


```julia
dm = pairwise(BrayCurtis(), ukids)
mds = fit(MDS, dm, distances=true)

num_genes = map(col-> sum(x-> x > 0, col), eachcol(occurrences(ukids)))

plot(mds)

scatter(projection(mds)[:,1], ukidsmeta.correctedAgeDays ./365, primary=false,
    ylabel="Age in years", xlabel="Kids unirefs MDS1", zcolor=num_genes, color=:BrBG,
    yticks=0:2:14)

```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08-func-by-mds1-age.svg"))
```


```julia
hascopri = let pcopri = [x for x in occurrences(view(species, species=["Prevotella_copri"]))'][:,1]
    map(x-> !ismissing(x[2].cogScore) && x[2].ageLabel == "2 and over" && pcopri[x[1]] > 0.001, enumerate(eachrow(ukidsmeta)))
end
nocopri = let pcopri = [x for x in occurrences(view(species, species=["Prevotella_copri"]))'][:,1]
    map(x-> !ismissing(x[2].cogScore) && x[2].ageLabel == "2 and over" && pcopri[x[1]] <= 0.001, enumerate(eachrow(ukidsmeta)))
end

copridf = vcat(DataFrame(cogScore=ukidsmeta[hascopri,:cogScore], copri=fill(true, sum(hascopri))),
     DataFrame(cogScore=ukidsmeta[nocopri,:cogScore], copri=fill(false, sum(nocopri))))

@df copridf boxplot(:copri, :cogScore, xticks=([0,1], ["no", "yes"]),
                    xlabel="P. copri", ylabel="cogScore")
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08-pcopri-cogScore.svg"))
```
```julia
hascopri = let pcopri = [x for x in occurrences(view(species, species=["Prevotella_copri"]))'][:,1]
    map(x-> !ismissing(x[2].neocortical) && x[2].ageLabel == "2 and over" && pcopri[x[1]] > 0.001, enumerate(eachrow(ukidsmeta)))
end
nocopri = let pcopri = [x for x in occurrences(view(species, species=["Prevotella_copri"]))'][:,1]
    map(x-> !ismissing(x[2].neocortical) && x[2].ageLabel == "2 and over" && pcopri[x[1]] <= 0.001, enumerate(eachrow(ukidsmeta)))
end

copridf = vcat(DataFrame(neocortical=ukidsmeta[hascopri,:neocortical], copri=fill(true, sum(hascopri))),
     DataFrame(neocortical=ukidsmeta[nocopri,:neocortical], copri=fill(false, sum(nocopri))))

@df copridf boxplot(:copri, :neocortical, xticks=([0,1], ["no", "yes"]),
                    xlabel="P. copri", ylabel="neocortical")
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08-pcopri-neocortical.svg"))
```
```julia
hascopri = let pcopri = [x for x in occurrences(view(species, species=["Prevotella_copri"]))'][:,1]
    map(x-> !ismissing(x[2].subcortical) && x[2].ageLabel == "2 and over" && pcopri[x[1]] > 0.001, enumerate(eachrow(ukidsmeta)))
end
nocopri = let pcopri = [x for x in occurrences(view(species, species=["Prevotella_copri"]))'][:,1]
    map(x-> !ismissing(x[2].subcortical) && x[2].ageLabel == "2 and over" && pcopri[x[1]] <= 0.001, enumerate(eachrow(ukidsmeta)))
end

copridf = vcat(DataFrame(subcortical=ukidsmeta[hascopri,:subcortical], copri=fill(true, sum(hascopri))),
     DataFrame(subcortical=ukidsmeta[nocopri,:subcortical], copri=fill(false, sum(nocopri))))

@df copridf boxplot(:copri, :subcortical, xticks=([0,1], ["no", "yes"]),
                    xlabel="P. copri", ylabel="subcortical")
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08-pcopri-subcortical.svg"))
```
```julia
hascopri = let pcopri = [x for x in occurrences(view(species, species=["Prevotella_copri"]))'][:,1]
    map(x-> !ismissing(x[2].limbic) && x[2].ageLabel == "2 and over" && pcopri[x[1]] > 0.001, enumerate(eachrow(ukidsmeta)))
end
nocopri = let pcopri = [x for x in occurrences(view(species, species=["Prevotella_copri"]))'][:,1]
    map(x-> !ismissing(x[2].limbic) && x[2].ageLabel == "2 and over" && pcopri[x[1]] <= 0.001, enumerate(eachrow(ukidsmeta)))
end

copridf = vcat(DataFrame(limbic=ukidsmeta[hascopri,:limbic], copri=fill(true, sum(hascopri))),
     DataFrame(limbic=ukidsmeta[nocopri,:limbic], copri=fill(false, sum(nocopri))))

@df copridf boxplot(:copri, :limbic, xticks=([0,1], ["no", "yes"]),
                    xlabel="P. copri", ylabel="limbic")
count(hascopri)
count(nocopri)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08-pcopri-limbic.svg"))
```



# Pfams
```julia; results="hidden"
# pfam = CSV.read("data/engaging/merged/batch1-10_pfam_names_relab_unstratified.tsv")
# names!(pfam, map(n-> Symbol(resolve_sampleID(replace(String(n), r"S\d+_Abundance-RELAB"=>"")).sample), names(pfam)))
# pfam_abt = abundancetable(pfam)
# upfam = view(pfam_abt, sites=sampleid.([kidsamples; momsamples]))
#
# pfam_moms = view(upfam, sites=sampleid.(momsamples))
# pfam_kids = view(upfam, sites = map(s-> s in kidsmeta.sample, sitenames(upfam)))
#
# @assert nsamples(kos_kids) == nrow(kidsmeta)
# @assert nsamples(kos_moms) == nrow(momsmeta)
# @assert all(i-> samplenames(upfam)[i] == umeta.sample[i], nsamples(upfam))
```

## Compare to taxonomic profiles

```julia; results="hidden"
taxdb = SQLite.DB("/lovelace/echo/sqldatabases/taxa.sqlite")
tax = sqlprofile(taxdb, samplefilter=x-> x in samples)
relativeabundance!(tax)
utax = view(tax, sites=sampleid.([ukidsamples; umomsamples]))

@assert samplenames(utax) == samplenames(uaccessory)

funcdm = pairwise(BrayCurtis(), uaccessory)
funcmds = fit(MDS, funcdm, distances=true)
taxdm = pairwise(BrayCurtis(), utax)
taxmds = fit(MDS, taxdm, distances=true)
```
```julia
scatter(projection(taxmds)[:,1], projection(funcmds)[:,1],
    group=umeta.ageLabel, color=color3',
    xlabel="Taxonomic MDS1", ylabel="Accessory genes MDS1")
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_tax_v_func_mds1.svg"))
```
```julia
scatter(projection(taxmds)[:,2], projection(funcmds)[:,2],
    group=umeta.ageLabel, color=color3', legend=:bottomright,
    xlabel="Taxonomic MDS2", ylabel="Accessory genes MDS2")
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_tax_v_func_mds2.svg"))
```

```julia; results="hidden"
ufeatures = match.(r"UniRef90_(\w+)", featurenames(uaccessory))
@assert !any(isnothing, ufeatures)
ufeatures = [f.captures[1] for f in ufeatures]

neuroactive_pos = findall(f-> f in na_uniref, ufeatures)
na = view(uaccessory, species=neuroactive_pos)
umeta.neuroactive_sum = sum(occurrences(na), dims=1) |> vec
umeta.total_sum = sum(occurrences(uaccessory), dims=1) |> vec
```
```julia
scatter(projection(taxmds)[:,1], projection(funcmds)[:,1],
    zcolor=umeta.neuroactive_sum ./ umeta.total_sum, color=:solar, primary=false,
    xlabel="Taxonomic MDS1", ylabel="Accessory genes MDS1", title="Neuroactive / total accessory")
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_tax_v_func_mds1_neuroactive.svg"))
```
```julia
scatter(projection(taxmds)[:,2], projection(funcmds)[:,2],
    zcolor=umeta.neuroactive_sum ./ umeta.total_sum, color=:solar, primary=false,
    xlabel="Taxonomic MDS2", ylabel="Accessory genes MDS2", title="Neuroactive / total accessory")
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_tax_v_func_mds2_neuroactive.svg"))
```
```julia
pcopri = occurrences(view(utax, species=["Prevotella_copri"]))|> vec
scatter(projection(taxmds)[:,1], projection(funcmds)[:,1],
    zcolor=log.(pcopri .+ 1e-4), color=:plasma, primary=false,
    xlabel="Taxonomic MDS1", ylabel="Accessory genes MDS1")

```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_tax_v_func_mds1_pcopri.svg"))
```
```julia
scatter(projection(taxmds)[:,2], projection(funcmds)[:,2],
    zcolor=log.(pcopri .+ 1e-4), color=:plasma, primary=false,
    xlabel="Taxonomic MDS2", ylabel="Accessory genes MDS2")
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_tax_v_func_mds2_pcopri.svg"))
```
```julia
αdiv = shannon(utax)
scatter(projection(taxmds)[:,1], projection(funcmds)[:,1],
    zcolor=αdiv, color=:viridis, primary=false,
    xlabel="Taxonomic MDS1", ylabel="Accessory genes MDS1")

```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_tax_v_func_mds1_alphadiv.svg"))
```
```julia
scatter(projection(taxmds)[:,2], projection(funcmds)[:,2],
    zcolor=αdiv, color=:viridis, primary=false,
    xlabel="Taxonomic MDS2", ylabel="Accessory genes MDS2")
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "08_tax_v_func_mds2_alphadiv.svg"))
```
