---
title: "Notebook 5: Taxonomic Profiles"
author: "Kevin Bonham, PhD"
options:
    line_width : 120
    wrap : false
---

Taxonomic profiles come from [MetaPhlAn2](https://bitbucket.org/biobakery/metaphlan2/src).
Each sample is run separately, and needs to be joined in a single table.
I'll use the function `load_taxonomic_profiles`

```julia; results="hidden"
using Pkg
Pkg.activate("analysis/")
using Revise
```
```julia
ENV["GKSwstype"] = "100"
using ECHOAnalysis
using DataFrames
using SQLite
using StatsPlots
using PrettyTables
using CSV
using Microbiome
using Distances
using MultivariateStats
using Pkg.TOML: parsefile
using Clustering
using MicrobiomePlots

rounder = Dict(0 => (v,i) -> typeof(v) <: AbstractFloat ? round(v,digits=3) : v)
# print ~15 random rows
randrowfilter(data, i) = rand() < (1 / size(data, 1)) * 15
@ptconfclean # clear previous configuration
@ptconf formatter = rounder nosubheader=true screen_size=(20,120) filters_row=(randrowfilter,)

includet("accessories.jl")

config = parsefile("data/data.toml")
widemeta = getmgxmetadata()
figures = config["output"]["figures"]
tables = config["output"]["tables"]
isdir(figures) || mkpath(figures)
isdir(tables) || mkpath(tables)
```
```julia
db = SQLite.DB(config["sqlite"]["taxa"]["path"])
species = sqlprofile(db, tablename="taxa", kind="species")
phyla = sqlprofile(db, tablename="taxa", kind="phylum")
@pt species
```

### PCoA Plots

For an initial overview,
let's look at the PCoA plots using BrayCurtis dissimilarity.

First, I'll convert these to the `AbundanceTable` type from `Microbiome.jl`
for easier maniplation, and do Total Sum Scaling (convert to relative abundance).


```julia; results="hidden"
sabt = abundancetable(species)
pabt = abundancetable(phyla)
relativeabundance!(sabt)
relativeabundance!(pabt)
```

Using `pairwise` from `Distances.jl` and `MDS` from `MultivariateStats.jl`,
we perform classical multidimensional scaling (which is the same thing
as principal coordinates analysis).

```julia
dm = pairwise(BrayCurtis(), sabt, dims=2)
mds = fit(MDS, dm, distances=true)
@recipe function f(mds::MDS{<:Real}; mds_axes=(1,2))
    length(mds_axes) in [2,3] || throw(ArgumentError("Can only accept 2 or 3 mds axes"))
    xax = mds_axes[1]
    yax = mds_axes[2]
    ev = eigvals(mds)
    var_explained = [v / sum(ev) for v in ev]
    tfm = collect(transform(mds)')

    xlabel --> "MDS$xax"
    ylabel --> "MDS$yax"
    seriestype := :scatter
    aspect_ratio --> 1

    if length(mds_axes) == 3
        zax = mds_axes[3]
        zlabel --> "MDS$zax"
        tfm[:,xax], tfm[:,yax], tfm[:,zax]
    else
        tfm[:,xax], tfm[:,yax]
    end
end
plot(mds, primary=false)
```

```julia; echo=false; results="hidden"
savefig(joinpath(figures, "05-basic_pcoa.png"));
```

```julia
widemeta = getmgxmetadata(samples=samplenames(sabt))
plot(mds, group=[ismissing(l) ? "missing" : l for l in widemeta.ageLabel],
    color=color2')
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "05-taxonomic-profiles-ageLabel.png"));
```


A scree plot can be used to visualize how many dimensions are necessary
to explain the bulk of the variance.

```julia
function scree(mds)
    ev = eigvals(mds)
    var_explained = [v / sum(ev) for v in ev]

    bar(var_explained, primary=false, linecolor=:match,
        yticks=0:0.025:0.1)
end

scree(mds)
ylabel!("Variance explained")
xlabel!("Principal coordinate axis")
```

```julia; echo=false; results="hidden"
savefig(joinpath(figures, "05-scree.png"));
```

It looks like there are a couple of "elbows" in the plot,
but nice to see that the first few axes explain the bulk of the variance.
Later on, we'll try to determine what's driving those axes.

Now let's put some decoration on that PCoA plot.

##### Sample type

First, children vs mothers.
We can identify the difference by the "C" or "M"
at the beginning of the sample ID.

```julia
# colors defined in `accessories.jl`
c = [startswith(x, "C") ? color2[1] : color2[2] for x in samplenames(sabt)]

p1 = plot(mds, marker=3, line=1, framestyle=1,
    color=c, primary=false, ticks=false)
scatter!([],[], color=color2[1], label="kids", legend=:topright)
scatter!([],[], color=color2[2], label="moms", legend=:topright)
title!("All samples taxonomic profiles")
```

```julia; echo=false; results="hidden"
savefig(joinpath(figures, "05-taxonomic-profiles-moms-kids.png"));
```

##### Diversity

The `shannon` function can calculate Shannon diversity for the entire `AbundanceTable`.

```julia
p2 = plot(mds, marker=3, line=1, ticks=false,
    zcolor=shannon(sabt), primary = false, color=:viridis,
    title="All samples, shannon diversity")
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "05-taxonomic-profiles-shannon.png"));
```

Neat! It looks like both of the first 2 axes of variation are related
to low vs high diversity.


##### Major Phyla

Because we were able to filter the original taxonomic profile by phyla,
we can also plot the relative abundance of the major phyla.
The ratio of Bacteroidetes and Firmicutes are often visible in the first
axes of variation in adult microbiomes.

```julia
bacteroidetes = vec(Matrix(phyla[phyla[!,1] .== "Bacteroidetes", 2:end]))
firmicutes = vec(Matrix(phyla[phyla[!,1] .== "Firmicutes", 2:end]))

p3 = plot(mds, marker=3, line=1, ticks=false,
    zcolor=bacteroidetes, primary = false, color=:plasma,
    title="All samples, Bacteroidetes")
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "05-taxonomic-profiles-bacteroidetes.png"));
```

Often, the first axis of variation in the gut microbiome of westerners
is the species _Prevotella copri_ (in the phylum Bacteroidetes).
Let's see what _P. copri_ is doing:

```julia
plot(mds, marker=3, line=1, ticks=false,
    zcolor=permutedims(collect(occurrences(view(sabt, species=["Prevotella_copri"])))),
    primary = false, color=:plasma,
    title="All samples, P. copri")
```

Looks like _P. copri_ is responsible for a decent chunk of the 2nd axis.

```julia
p4 = plot(mds, marker=3, line=1, ticks=false,
    zcolor=firmicutes, primary = false, color=:plasma,
    title="All samples, Firmicutes")
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "05-taxonomic-profiles-firmicutes.png"));
```

```julia; echo=false; results="hidden"
plot(p1, p2, p3, p4, marker = 2, markerstroke=0, size=(800, 800))
savefig(joinpath(figures, "05-taxonomic-profiles-grid.png"));
```

So that balance is somewhat visible, but there's something else going on too.

#### Moms

There aren't a ton of moms in the samples yet,
but let's just see what they look like on their own

```julia
# use the `uniquesamples` function to get a single sample per mom
unique_moms = uniquetimepoints(samplenames(sabt), samplefilter=ismom)

umoms = view(sabt, sites=sampleid.(unique_moms))

# get pairwise Bray Curtis distance matrix
umoms_dm = pairwise(BrayCurtis(), umoms)

# hierarchical clustering to put similar samples together
umoms_hcl = hclust(umoms_dm, linkage=:average, branchorder=:optimal)

abundanceplot(umoms, srt=umoms_hcl.order, topabund=11, title="Moms, top 11 species",
    xticks=false, color=color4', linecolor=:match, linestyle=:dot)
```

```julia; echo=false; results="hidden"
savefig(joinpath(figures, "05-moms-abundanceplot.png"));
```

```julia
abundanceplot(umoms, srt=umoms_hcl.order, topabund=11, title="Moms, top 11 species",
    xticks=false, color=color4', legend=false, linecolor=:match, linestyle=:dot)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "05-moms-abundanceplot-nolegend.png"));
```

Those look like normal adult microbiomes.

#### Kids

Now, I'll focus on the kids in the group,
the samples that were stored in Genotek OMNIgeneGUT tubes
and also remove duplicates
(since many of the kids are sampled more than once).
The `uniquesamples` function identifies the first sample for each kid
when we use `identifiers=[:subject]` (and `takefirst=true` by default)

```julia
kids_samples = uniquetimepoints(samplenames(sabt), samplefilter=iskid)
kids = view(sabt, sites=sampleid.(kids_samples))
nsp = map(sample -> count(x-> x > 0.001, sample), eachcol(occurrences(kids)))

kids_dm = pairwise(BrayCurtis(), kids)
kids_mds = fit(MDS, kids_dm, distances=true)
kidsmeta = getmgxmetadata(samples=kids_samples)

scatter(kidsmeta.correctedAgeDays ./ 365, nsp,
    title="Samples by age", xlabel="Age (years)",
    ylabel="N species", legend=false, color=:lightgrey)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "05-species-by-age.png"))
```

```julia
firstkids_samples = uniquetimepoints(samplenames(sabt), samplefilter=iskid, takefirst=true)
kids = view(sabt, sites=sampleid.(firstkids_samples))

kids_dm = pairwise(BrayCurtis(), kids)
kids_mds = fit(MDS, kids_dm, distances=true)

p5 = plot(kids_mds, marker=3, line=1, ticks=false,
    zcolor=shannon(kids), primary = false, color=:viridis,
    title="Kids, shannon diversity")
```

```julia
savefig(joinpath(figures, "05-taxonomic-profiles-kids-shannon.png"));
```

Let's look at the phyla too:

```julia
pkids = view(pabt, sites=sampleid.(firstkids_samples))

kids_bact = vec(collect(occurrences(view(pkids, species=occursin.("Bact", speciesnames(pkids))))))
kids_firm = vec(collect(occurrences(view(pkids, species=occursin.("Firm", speciesnames(pkids))))))
kids_act = vec(collect(occurrences(view(pkids, species=occursin.("Actino", speciesnames(pkids))))))
kids_proteo = vec(collect(occurrences(view(pkids, species=occursin.("Proteo", speciesnames(pkids))))));
```
```julia
p6 = plot(kids_mds, marker=4, line=1, ticks=false,
        zcolor=kids_bact, primary = false, color=:plasma,
        title="Kids, Bacteroidetes")
```

```julia
p7 = plot(kids_mds, marker=4, line=1, ticks=false,
        zcolor=kids_firm, primary = false, color=:plasma,
        title="Kids, Firmicutes")
```

```julia
p8 = plot(kids_mds, marker=4, line=1, ticks=false,
        zcolor=kids_act, primary = false, color=:plasma,
        title="Kids, Actinobacteria")
```

```julia
p9 = plot(kids_mds, marker=4, line=1, ticks=false,
        zcolor=kids_proteo, primary = false, color=:plasma,
        title="Kids, Proteobacteria")
```

```julia; echo=false; results="hidden"
plot(p6,p7,p8,p9)

savefig(joinpath(figures, "05-taxonomic-profiles-kids-phyla.png"))
```

In order to decorate these PCoA plots with other useful information,
we need to return to the metadata.

```julia
fkidsmeta = getmgxmetadata(samples=firstkids_samples)
fkidsmeta[!,:shannon] = shannon(kids)
fkidsmeta[!,:ginisimpson] = ginisimpson(kids)

scatter(projection(kids_mds)[:, 1], fkidsmeta[!, :correctedAgeDays] ./365, xticks=false,
    primary=false, zcolor = fkidsmeta[!,:shannon], color=:viridis)
ylabel!("Age (years)")
xlabel!("MDS1")
title!("All kids age / MDS axis1 / Alpha diversity")
```
```julia
savefig(joinpath(figures, "05-taxonomic-profiles-kids-age-pco1-diversity.png"));
```

Here we can see that alpha diversity increases with age (not too surprising).
Another way to look at it is to plot the alpha diversity at each age:

```julia
fkidsmeta.floorAge = [ismissing(x) ? missing : Int(floor(x / 365)) for x in fkidsmeta.correctedAgeDays]

boxplot(collect(skipmissing(fkidsmeta.floorAge)),
    fkidsmeta.ginisimpson[.!ismissing.(fkidsmeta.floorAge)],
    color=:lightgrey, legend=false, xlabel="Age in Years",
    yaxis=(0:0.1:1.1, "Alpha diversity (GiniSimpson)"))
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "05-kids-alpha-diversity-box.png"));
```


```julia
kids_hcl = hclust(kids_dm, linkage=:average, branchorder=:optimal)

abundanceplot(kids, srt = kids_hcl.order, topabund=11,
    title="Unique kids, top 11 species",
    xticks=false, color=color4', linecolor=:match, linestyle=:dot)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "05-kids-abundanceplot.png"))
```
```julia
abundanceplot(kids, srt = kids_hcl.order, topabund=11,
    title="Unique kids, top 11 species",
    xticks=false, color=color4', linecolor=:match, linestyle=:dot,
    legend=false)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "05-kids-abundanceplot-nolegend.png"));
```

These also look like adult microbiomes, with a smattering of young-kids
microbes thrown in for good measure (eg _Bifidobacterium longum_).

We can also annotate this plot with the age of the kids

```julia
plot(
    abundanceplot(kids, srt = kids_hcl.order, topabund=11, title="Kids, top 11 species",
        xticks=false, color=color4', legend=false, linecolor=:match, linestyle=:dot),
    plot(annotationbar(string.(fkidsmeta.ageLabel[kids_hcl.order]), color2)),
    layout = grid(2,1,heights=[0.9, 0.1])
    )

```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "05-kids-abundanceplot-age.png"));
```
```julia; echo=false; results="hidden"
plot(annotationbar(string.(fkidsmeta.ageLabel[kids_hcl.order]), color2))
savefig(joinpath(figures, "05-kids-abundanceplot-age-legend.png"));
```

```julia
x = projection(kids_mds)[.!ismissing.(fkidsmeta.correctedAgeDays), 1]
y = projection(kids_mds)[.!ismissing.(fkidsmeta.correctedAgeDays), 2]

scatter(x, y, zcolor=fkidsmeta[.!ismissing.(fkidsmeta.correctedAgeDays), :correctedAgeDays] ./365,
    primary=false, color=:PuBu, title = "Unique Kids Taxonomic Profiles, Age", ticks=false)
xlabel!("MDS1")
ylabel!("MDS2")
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "05-taxonomic-profiles-mds-kids-age.png"));
```

Here it looks like the outlying tail is the youngest kids.
Again, this makes sense. We know that infants microbiomes change quite a bit
over the first years of life.

Let's focus on just the youngest kids:

```julia
youngkids = map(x-> !ismissing(x) && x/365 < 2, fkidsmeta.correctedAgeDays)

ykids = view(kids, sites = youngkids)
ykids_dm = pairwise(BrayCurtis(), ykids)
ykids_mds = fit(MDS, ykids_dm, distances=true)

ykids_hcl = hclust(ykids_dm, linkage=:average, branchorder=:optimal)
abundanceplot(ykids, srt = ykids_hcl.order, topabund=11, title="Kids under 2, top 11 species",
    xticks=false, color=color4', linecolor=:match, linestyle=:dot)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "05-young-kids-abundanceplot.png"));
```

```julia
abundanceplot(ykids, srt = ykids_hcl.order, topabund=11, title="Kids under 2, top 11 species",
    xticks=false, color=color4', linecolor=:match, linestyle=:dot,
    legend=false)
```

```julia; echo=false; results="hidden"
savefig(joinpath(figures, "05-young-kids-abundanceplot-nolegend.png"));
```

### Other Metadata Overviews

Eventually, we'll want to do statistical tests for associations,
but for now, just a bit more exploratory visualization.

#### Brain Volume Quartiles

```julia
using StatsBase

function colorquartile(arr, clrs)
    (q1, q2, q3) = percentile(collect(skipmissing(arr)), [25, 50, 75])
    length(clrs) > 4 ? mis = colorant"gray" : clrs[5]
    map(arr) do x
        ismissing(x) && return mis
        x < q1 && return clrs[1]
        x < q2 && return clrs[2]
        x < q3 && return clrs[3]
        return clrs[4]
    end
end

scatter(projection(kids_mds)[:, 1], fkidsmeta.correctedAgeDays ./ 365,
    color=colorquartile(fkidsmeta.grey_matter_volume, color2[[1,2,3,4,end]]),
    markersize=5, primary=false, xticks=false)
scatter!([],[], color=color2[1], label="25th percentile")
scatter!([],[], color=color2[2], label="50th percentile")
scatter!([],[], color=color2[3], label="75th percentile")
scatter!([],[], color=color2[4], label="99th percentile")
scatter!([],[], color=color2[end], label="missing", legend=:topleft)
xlabel!("MDS1")
ylabel!("Age (years)")
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "05-kids-brain-quartiles.png"));
```


#### Birth type

Birth type (vaginal or cesarean) is known to have a substantial affect on kids'
microbiomes. Let's see where that falls in our data:

```julia
plot(kids_mds, line=1,
    color=ECHOAnalysis.metacolor(fkidsmeta.birthType, color2[4:5], missing_color=color2[end]),
    title="Kids, BirthType", primary=false, ticks=false)
scatter!([],[], color=color2[4], label=unique(fkidsmeta.birthType)[1])
scatter!([],[], color=color2[5], label=unique(fkidsmeta.birthType)[2])
scatter!([],[], color=color2[end], label="missing", legend=:bottomleft)

sum(!ismissing, fkidsmeta.cogScore)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "05-taxonomic-profiles-kids-birth.png"));
```

#### Breastfeeding

Information about braestfeeding is spread across 2 different parent tables.
`BreastfeedingDone` indicates that the child is no longer breastfeeding,
and has a lot of information about formula use, solid food etc,
`BreastfeedingStill` is for kids that are still breastfeeding,
and has different information.

I'd like to distill all of this into:

1. breastfeeding: `true`/`false`,
2. formula: `true`/`false`

Both of these might be `true`.
In principle, they shouldn't both be `false`.

I defined [`breastfeeding`](https://klepac-ceraj-lab.github.io/echo_analysis/dev/metadata_handling/#ECHOAnalysis.breastfeeding-Tuple{DataFrames.DataFrameRow})
and [`formulafeeding`](https://klepac-ceraj-lab.github.io/echo_analysis/dev/metadata_handling/#ECHOAnalysis.formulafeeding-Tuple{DataFrames.DataFrameRow})
to calculate these values.

```julia
fkidsmeta.breastfed = map(breastfeeding, eachrow(fkidsmeta))
fkidsmeta.formulafed = map(formulafeeding, eachrow(fkidsmeta))

bfcolor = let bf = []
    for row in eachrow(fkidsmeta)
        if row[:breastfed] && row[:formulafed]
            push!(bf, color1[1])
        elseif row[:breastfed]
            push!(bf, color1[2])
        elseif row[:formulafed]
            push!(bf, color1[3])
        else
            push!(bf, color1[end])
        end
    end
    bf
end

plot(kids_mds, line=1,
    color=bfcolor,
    title="Kids, Breastfeeding", primary=false)
scatter!([],[], color=color1[2], label="breastfed")
scatter!([],[], color=color1[3], label="formula fed")
scatter!([],[], color=color1[1], label="both")
scatter!([],[], color=color1[end], label="missing", legend=:bottomleft)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "05-taxonomic-profiles-kids-breastfeeding.png"));
```

Nothing obvious from this level, but that's not necessarily surprising.
We need stats!
