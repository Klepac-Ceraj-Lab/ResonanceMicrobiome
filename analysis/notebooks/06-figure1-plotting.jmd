```julia
using Pkg
Pkg.activate(".")
using JLD2
using DataFrames
using MultivariateStats
using MakieLayout
using AbstractPlotting
using StatsMakie
using CairoMakie
using Makie
using ColorSchemes
using Statistics
using FileIO
using StatsBase: midpoints

AbstractPlotting.inline!(false)

@load "analysis/notebooks/figure1assets/figure1a.jld2" speciesmds allmeta speciesmdsaxes color3
@load "analysis/notebooks/figure1assets/figure1b.jld2" kidsspeciesmds kidsspeciesmdsaxes allkidsmeta
@load "analysis/notebooks/figure1assets/figure1c.jld2" unirefaccessorymds ubothmeta unirefaccessorymdsaxes
@load "analysis/notebooks/figure1assets/figure1d.jld2" kidsunirefaccessorymds kidsunirefaccessorymdsaxes
@load "analysis/notebooks/figure1assets/figure1e.jld2" r2 r2m qa allpermanovas
@load "analysis/notebooks/figure1assets/figure1g.jld2" allfsea mdcors
@load "analysis/notebooks/suppfigureassets/s1.jld2" speciesdiffs unirefaccessorydiffs kosdiffs pfamsdiffs

allfsea.median = map(median, allfsea.cors)
rename!(r2, :unirefaccessory=>:accessory)
```

# Figure 1

```julia
res=(5*300,6*300)
scene, layout = layoutscene(resolution=res)

cohort = load("analysis/figures/img/cohort.png");
ratio_img = size(cohort)[1] / size(cohort)[2]
fig1a_layout = GridLayout(alignmode=Outside())
fig1a = fig1a_layout[1,1]= LAxis(scene)
fig1bc_layout = GridLayout(alignmode=Outside())
fig1b = fig1bc_layout[1,1]= LAxis(scene)
fig1c = fig1bc_layout[1,2]= LAxis(scene)

layout[1,1] = fig1a_layout
layout[2,1] = fig1bc_layout

image!(fig1a, rotr90(cohort)) # for some reason Makie plots images rotated
tightlimits!(fig1a)
hidexdecorations!(fig1a)
fig1a.xgridvisible = false
hideydecorations!(fig1a)
fig1a.ygridvisible = false
colsize!(layout, 1, Relative(1)) # need to fix this so Aspect with it can work
rowsize!(layout, 1, Aspect(1, ratio_img))

fig1a_layout[1, 1, TopLeft()] = LText(scene, "a", textsize = 40, padding = (0, 0, 10, 0))
fig1bc_layout[1, 1, TopLeft()] = LText(scene, "b", textsize = 40, padding = (0, 0, 30, 0))
fig1bc_layout[1, 2, TopLeft()] = LText(scene, "c", textsize = 40, padding = (0, 0, 10, 0))

f1b = scatter!(fig1b, Group(marker=allkidsmeta.ageLabel), Style(color=allkidsmeta.shannon),
        projection(kidsspeciesmds)[:,1], allkidsmeta.correctedAgeDays ./ 365,
        markersize = 10 * AbstractPlotting.px, marker=marker=[:utriangle, :rect, :circle],
        strokecolor=:black, strokewidth=1)
fig1b.xgridvisible = false
fig1b.xlabel = "MDS1 ($(round(kidsspeciesmdsaxes[1]*100, digits=2)) %)"
fig1b.ylabel = "Age (years)"
fig1b.xticksvisible=false
fig1b.xticklabelsvisible=false
fig1b.ylabelpadding=20
fig1b.xlabelpadding=20

legend_1BC_markers = fig1bc_layout[2, 1:2] = LLegend(scene, ncols=4,
                                                    height=Auto(true), width=Auto(false),
                                                    titlevisible=false, patchcolor=:transparent)

legend_1BC_markers.entries[] = LegendEntry.(
    [
    "1 and under",
    "1 to 2",
    "2 and over",
    ],
    [
    MarkerElement(marker = :utriangle, color=:white, strokecolor=:black),
    MarkerElement(marker = :rect, color=:white, strokecolor=:black),
    MarkerElement(marker = :circle, color=:white, strokecolor=:black),
    ]
)

f1b_colorbar_legend = LColorbar(scene, f1b, width=30)
f1b_colorbar_layout = gridnest!(fig1bc_layout, 1, 1)
f1b_colorbar_layout[1, 2] = f1b_colorbar_legend
f1b_colorbar_layout[1, 2, Left()] = LText(scene, "Shannon Index", rotation = pi/2, padding = (0, 5, 0, 0))

f1c = scatter!(fig1c, Group(marker=allkidsmeta.ageLabel), Style(color=allkidsmeta.n_unirefs), # identifiable_unirefs?
        projection(kidsunirefaccessorymds)[:,1], allkidsmeta.correctedAgeDays ./ 365,
        markersize = 10 * AbstractPlotting.px, marker=marker=[:utriangle, :rect, :circle],
        strokecolor=:black, strokewidth=1, colormap=:BrBG)
fig1c.xgridvisible = false
fig1c.xlabel = "MDS1 ($(round(kidsunirefaccessorymdsaxes[1]*100, digits=2)) %)"
fig1c.ylabel = "Age (years)"
fig1c.xticksvisible=false
fig1c.xticklabelsvisible=false
fig1c.ylabelpadding=20
fig1c.xlabelpadding=20

f1c_colorbar_legend = LColorbar(scene, f1c, width=30)
f1c_colorbar_legend.ticks = let ur = allkidsmeta.n_unirefs ./ 1e3
    r = range(floor(Int, minimum(ur)), stop=ceil(Int,maximum(ur)), length=6)
    ManualTicks(r .* 1e3, map(i-> join([floor(Int,i), " k"]), r))
end

f1c_layout = gridnest!(fig1bc_layout, 1, 2)
f1c_layout[1, 2] = f1c_colorbar_legend
f1c_layout[1, 2, Left()] = LText(scene, "Number of UniRef90s", rotation = pi/2, padding = (0, 5, 0, 0))

# f1c_colorbar_legend = LColorbar(scene, f1c, width=30)
# f1c_colorbar_layout = gridnest!(layout, 2, 1)
# f1c_colorbar_layout[1, 2] = f1c_colorbar_legend
# f1c_colorbar_layout[1, 2, Left()] = LText(scene, "Fraction Identified", rotation = pi/2, padding = (0, 5, 0, 0))

foreach(Union{LColorbar, LAxis}, layout) do obj
    tight_ticklabel_spacing!(obj)
end
save("analysis/figures/figure1.jpg", scene, resolution=res);
scene
```

# Figure 2

```julia
res=(3*300,4*300)
scene, layout = layoutscene(resolution=res)

fig2a = layout[1,1] = LAxis(scene)
fig2b = layout[2:3,1] = LAxis(scene)

layout[1, 1, TopLeft()] = LText(scene, "a", textsize = 40, padding = (0, 0, 10, 0))
layout[2, 1, TopLeft()] = LText(scene, "b", textsize = 40, padding = (0, 0, 30, 0))


let filt = map(!ismissing, allkidsmeta.cogScore)
    x = disallowmissing(allkidsmeta.correctedAgeDays[filt] ./ 365)
    y = disallowmissing(allkidsmeta.cogScore[filt])
    g = disallowmissing(allkidsmeta.cogAssessment[filt])
    scatter!(fig2a, Group(g), x, y,
                color=ColorSchemes.Set1_5.colors[2:end],
                markersize = 10 * AbstractPlotting.px,
                strokecolor=:black, strokewidth=1
                )

end
fig2a.xlabel = "Age (years)"
fig2a.ylabel = "Overall cognitive function"
fig2a.xlabelpadding = 20
fig2a.ylabelpadding = 20

f2a_layout = gridnest!(layout, 1, 1)
legend_2a = f2a_layout[1, 2] = LLegend(scene, titlevisible=false, patchcolor=:transparent)
legend_2a.entries[] = LegendEntry.(
    string.(sort(unique(skipmissing(allkidsmeta.cogAssessment)))),
    [MarkerElement(marker=:circle, color=ColorSchemes.Set1_7.colors[i], strokecolor=:black) for i in 2:5]
    )



phmyorder = [
    "subject",
    "subject type",
    "2+ subject type",
    "age",
    "2+ age",
    "child gender",
    "birth type",
    "breastfeeding",
    "mother SES",
    "BMI",
    "cognitive function",
    "neocortical",
    "subcortical",
    "limbic",
    "cerebellar"
]
phmysrt = reverse(invperm(sortperm(phmyorder)))

phmxorder = [
    "species",
    "accessory",
    "kos",
    "pfams"
]
phmxsrt = reverse(invperm(sortperm(phmxorder)))

values = disallowmissing(r2m')[phmxsrt, phmysrt]
xrange = 0:size(values,1)
yrange = 0:size(values,2)
phm = heatmap!(fig2b, xrange, yrange, values, colorrange=(0,0.21), colormap=:PuBu)

pixelcentervalues = [Point2f0(x, y)
    for x in midpoints(LinRange(xrange.start, xrange.stop, size(values, 1) + 1)),
        y in midpoints(LinRange(yrange.start, yrange.stop, size(values, 2) + 1)) .- 0.1]
function rect_to_rect(fromrect, torect, point)
    pfrac = (point .- fromrect.origin) ./ fromrect.widths
    pfrac .* torect.widths .+ torect.origin
end
pixelvals = lift(fig2b.limits, fig2b.scene.px_area) do lims, pxa
    vec(rect_to_rect.(Ref(lims), Ref(pxa), pixelcentervalues))
end
labels = vec([string(v)[1:5] for v in values])
annotations!(scene, labels, pixelvals,
    align = (:center, :center),
    color = ifelse.(values .< 0.14, :black, :white),
    textsize = 16)

sig = vec(permutedims(replace(qa[phmysrt, exsrt], "" => " ")))
annotations!(scene, sig, @lift($pixelvals .+ Ref(Point2f0(0, 10))),
    align = (:center, :center),
    color = ifelse.(values .< 0.14, :black, :white),
    textsize = 16)

# sigpixelvals = lift(axes_1E.limits, axes_1E.scene.px_area) do lims, pxa
#     vec(rect_to_rect.(Ref(lims), Ref(pxa), pixelcentervalues .+ Ref(Point2f0(0.2, 0))))
# end
# annotations!(scene, vec([v for v in sig]), sigpixelvals,
#     align = (:center, :center),
#     color = ifelse.(values .< 0.14, :black, :white),
#     textsize = 16)

tightlimits!(fig2b)

fig2b.yticks = ManualTicks(0.5:1:size(r2m,1) - 0.5, r2.label[phmysrt])
tight_yticklabel_spacing!(fig2b)

fig2b.xticks = ManualTicks(0.5:1:size(r2,2) - 1.5, string.(names(r2)[2:end][exsrt]))

phm_legend = LColorbar(scene, hm, width=30)
phm_legend.ticks = let r = range(0, stop=0.20, length=6)
    t = string.(r)
    t[end] = join([">", t[end]])
    ManualTicks(r,t)
end
phm_layout = gridnest!(layout, 2:3, 1)
phm_layout[1:2, 2] = phm_legend
phm_layout[1:2, 2, Left()] = LText(scene, "% Variance", rotation = pi/2, padding = (0, 5, 0, 0))

foreach(Union{LColorbar, LAxis}, layout) do obj
    tight_ticklabel_spacing!(obj)
end
save("analysis/figures/figure2.jpg", scene, resolution=res);

scene
```

# Figure 3

```julia
res = (6*300, 3*300)
scene, layout = layoutscene(resolution = res)

fsea_axes = layout[1, 1:5] = [LAxis(scene) for col in 1:5]
fsea_legend = layout[2, 1:5] = LLegend(scene, height=100,
                                            ncols=7, nrows=2, titlevisible=false,
                                            patchcolor=:transparent
                                            )

layout[1, 1, TopLeft()] = LText(scene, "a", textsize = 40, padding = (0, 0, 10, 0))

cs = copy(ColorSchemes.RdYlBu_9.colors)
gr = ColorSchemes.grays.colors[5]
cs = [cs[[1,2,4]]..., gr,cs[[end-2,end-1,end]]...]
fsea_legend.entries[] = LegendEntry.(
    ["        ", "median < 0", "      ", "  ", "      ", "median > 0", "        ",
     "q < 0.001", "q < 0.01", "q < 0.1", "NS", "q < 0.1", "q < 0.01", "q < 0.001"],
    [
        MarkerElement(marker = :rect, color=:white, strokecolor=:white, patchcolor=:white),
        MarkerElement(marker = :rect, color=:white, strokecolor=:white, patchcolor=:white),
        MarkerElement(marker = :rect, color=:white, strokecolor=:white, patchcolor=:white),
        MarkerElement(marker = :rect, color=:white, strokecolor=:white, patchcolor=:white),
        MarkerElement(marker = :rect, color=:white, strokecolor=:white, patchcolor=:white),
        MarkerElement(marker = :rect, color=:white, strokecolor=:white, patchcolor=:white),
        MarkerElement(marker = :rect, color=:white, strokecolor=:white, patchcolor=:white),
        MarkerElement(marker = :rect, color = cs[1], strokecolor = :black),
        MarkerElement(marker = :rect, color = cs[2], strokecolor = :black),
        MarkerElement(marker = :rect, color = cs[3], strokecolor = :black),
        MarkerElement(marker = :rect, color = cs[4], strokecolor = :black),
        MarkerElement(marker = :rect, color = cs[5], strokecolor = :black),
        MarkerElement(marker = :rect, color = cs[6], strokecolor = :black),
        MarkerElement(marker = :rect, color = cs[7], strokecolor = :black)
    ]
)

allfsea.color = map(eachrow(allfsea)) do row
    m = row.median
    q = row.qvalue
    c = cs[4]
    if m > 0
        if q < 0.001
            c = cs[end]
        elseif q < 0.01
            c = cs[end-1]
        elseif q < 0.1
            c = cs[end-2]
        end
    elseif m < 0
        if q < 0.001
            c = cs[1]
        elseif q < 0.01
            c = cs[2]
        elseif q < 0.1
            c = cs[3]
        end
    end
    c
end


allfsea2 = vcat(
    (DataFrame((geneset=row.geneset,
                metadatum=row.metadatum,
                cor=i,
                color=row.color,
                qvalue=row.qvalue
                ) for i in row.cors)
    for row in eachrow(allfsea))...
    )
allfsea2.geneset = map(allfsea2.geneset) do gs
    gs = replace(gs, r" \(.+\)"=>"")
    gs = replace(gs, r"^.+Estradiol"=>"Estradiol")
    gs = replace(gs, "degradation"=>"deg")
    gs = replace(gs, "synthesis"=>"synth")
    gs
end

siggs = filter(row-> row.anysig, by(allfsea2, :geneset) do gs
                (anysig = any(<(0.1), gs.qvalue),)
            end).geneset |> Set

filter!(row-> row.geneset in siggs, allfsea2)
sort!(allfsea2, :geneset, rev=true)
let genesets = unique(allfsea2.geneset)
    gmap = Dict(g=>i for (i,g) in enumerate(genesets))
    allfsea2.gsindex = [gmap[g] for g in allfsea2.geneset]
end

groups = groupby(allfsea2, :metadatum)

let ugs = unique(allfsea2.geneset)
for (i, gr) in enumerate(groups[2:end])
    by(gr, :gsindex) do gs
        g = first(gs.geneset)
        x = gs.gsindex
        y = gs.cor
        c = first(gs.color)
        boxplot!(fsea_axes[i], x, y, color=c, orientation=:horizontal,
            markersize = 10 * AbstractPlotting.px, outliercolor=c)
    end
    fsea_axes[i].xlabel = first(gr.metadatum)
    fsea_axes[i].xlabelpadding = 20
    fsea_axes[i].yticks = ManualTicks(1:length(ugs), ugs)

    i !=1 && (fsea_axes[i].yticklabelsvisible = false; fsea_axes[i].yticksvisible = false)
end # for
end # let

extr = extrema(allfsea2.cor)
for i in 1:5
    xlims!(fsea_axes[i], extr)
end
foreach(Union{LColorbar, LAxis}, layout) do obj
    tight_ticklabel_spacing!(obj)
end
save("analysis/figures/figure3.jpg", scene, resolution=res);
scene
```

```julia
# CairoMakie.activate!(type = "svg")
# save("data/analysis/figures/figure1/figure1-makie.svg", scene, resolution=res);
```


```julia
scene, layout = layoutscene()
lo = GridLayout()
p1 = lo[1:2,1] = [LAxis(scene), LAxis(scene)]
layout[1, 1] = lo
scene
boxplot!(p1[1,1], collect(1:10), rand(10,2), markersize = AbstractPlotting.px *20)
boxplot!(p1[2, 1], collect(1:10), rand(10,2), markersize = AbstractPlotting.px *20,
    orientation=:horizontal)

```
