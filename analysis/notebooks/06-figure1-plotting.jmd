```julia
using Pkg
Pkg.activate("analysis/")
using JLD2
using DataFrames
using MultivariateStats
using MakieLayout
using AbstractPlotting
using StatsMakie
using CairoMakie
using Makie
using ColorSchemes
using Statistics
using StatsBase: midpoints

AbstractPlotting.inline!(false)

@load "analysis/notebooks/figure1assets/figure1a.jld2" speciesmds allmeta speciesmdsaxes color3
@load "analysis/notebooks/figure1assets/figure1b.jld2" kidsspeciesmds kidsspeciesmdsaxes allkidsmeta
@load "analysis/notebooks/figure1assets/figure1c.jld2" unirefaccessorymds ubothmeta unirefaccessorymdsaxes
@load "analysis/notebooks/figure1assets/figure1d.jld2" kidsunirefaccessorymds kidsunirefaccessorymdsaxes
@load "analysis/notebooks/figure1assets/figure1e.jld2" r2 r2m qa allpermanovas
@load "analysis/notebooks/figure1assets/figure1g.jld2" allfsea mdcors
@load "analysis/notebooks/suppfigureassets/s1.jld2" speciesdiffs unirefaccessorydiffs kosdiffs pfamsdiffs keypairs

allfsea.median = map(median, allfsea.cors)
rename!(r2, :unirefaccessory=>:accessory)
```

```julia
res = (8*300, 6*300)
scene, layout = layoutscene(resolution = res)
layout_1ABCD = GridLayout()
layout_1E = GridLayout(alignmode=Outside())
layout_1F = GridLayout(alignmode=Outside())
layout_1G = GridLayout(alignmode=Outside())
layout_1G_leg = GridLayout()


axes_1A = layout_1ABCD[1:2, 1]   = LAxis(scene)
axes_1C = layout_1ABCD[3, 1]   = LAxis(scene)

axes_1B = layout_1ABCD[1:2, 2]   = LAxis(scene)
axes_1D = layout_1ABCD[3, 2]   = LAxis(scene)

legend_1ABCD_markers = layout_1ABCD[4, 1:2] = LLegend(scene, ncols=4,
                                                    height=Auto(true), width=Auto(false),
                                                    titlevisible=false, patchcolor=:transparent)

axes_1E = layout_1E[1,1] =  LAxis(scene,
                                    xticklabelrotation = pi/4,
                                    xticklabelalign = (:right, :center))
axes_1F = layout_1F[1, 1]   =  LAxis(scene)
axes_1G = layout_1G[1, 1:5]  = [LAxis(scene) for col in 1:5]
legend_1G = layout_1G_leg[1, 1:5]  = LLegend(scene, height=100,
                                            ncols=7, nrows=2, titlevisible=false,
                                            patchcolor=:transparent
                                            )

layout[1:3, 1:2] = layout_1ABCD
layout[1:2, 3] = layout_1E
layout[3, 3] = layout_1F
layout[4:5, 1:3] = layout_1G
layout[6, 1:3] = layout_1G_leg

layout_1ABCD[1, 1, TopLeft()] = LText(scene, "a", textsize = 40, padding = (0, 0, 10, 0))
layout_1ABCD[3, 1, TopLeft()] = LText(scene, "b", textsize = 40, padding = (0, 0, 30, 0))
layout_1ABCD[1, 2, TopLeft()] = LText(scene, "c", textsize = 40, padding = (0, 0, 10, 0))
layout_1ABCD[3, 2, TopLeft()] = LText(scene, "d", textsize = 40, padding = (0, 0, 30, 0))
layout[1, 3, TopLeft()] = LText(scene, "e", textsize = 40, padding = (0, 0, 10, 0))
layout[3, 3, TopLeft()] = LText(scene, "f", textsize = 40, padding = (0, 0, 10, 0))
layout[4, 1, TopLeft()] = LText(scene, "g", textsize = 40, padding = (0, 0, 10, 0))

# Begin Figures

f1a = scatter!(axes_1A, Group(marker=allmeta.ageLabel),
        Style(color=allmeta.shannon), grid=false,
        projection(speciesmds)[:,1:2],
        markersize = 15 * AbstractPlotting.px, marker=[:utriangle, :hexagon, :rect, :cross],
        strokecolor=:black, strokewidth=1)
axes_1A.xgridvisible = false
axes_1A.ygridvisible = false
axes_1A.xlabel = "MDS1 ($(round(speciesmdsaxes[1]*100, digits=2)) %)"
axes_1A.ylabel = "MDS2 ($(round(speciesmdsaxes[2]*100, digits=2)) %)"
axes_1A.xticksvisible=false
axes_1A.xticklabelsvisible=false
axes_1A.yticksvisible=false
axes_1A.yticklabelsvisible=false
axes_1A.ylabelpadding=20
axes_1A.xlabelpadding=20

legend_1ABCD_markers.entries[] = LegendEntry.(
    [
    "1 and under",
    "1 to 2",
    "2 and over",
    "mom"
    ],
    [
    MarkerElement(marker = :utriangle, color=:white, strokecolor=:black),
    MarkerElement(marker = :hexagon, color=:white, strokecolor=:black),
    MarkerElement(marker = :rect, color=:white, strokecolor=:black),
    MarkerElement(marker = :cross, color=:white, strokecolor=:black)
    ]
)

f1a_colorbar_legend = LColorbar(scene, f1a, width=30)
f1a_colorbar_layout = gridnest!(layout_1ABCD, 1:3, 1)
f1a_colorbar_layout[1:3, 2] = f1a_colorbar_legend
f1a_colorbar_layout[1:3, 2, Left()] = LText(scene, "Shannon Index", rotation = pi/2, padding = (0, 5, 0, 0))

f1c = scatter!(axes_1C, Group(marker=allkidsmeta.ageLabel),
        projection(kidsspeciesmds)[:,1], allkidsmeta.correctedAgeDays ./ 365,
        markersize = 10 * AbstractPlotting.px, marker=marker=[:utriangle, :hexagon, :rect],
        color=allkidsmeta.shannon,
        strokecolor=:black, strokewidth=1)
axes_1C.xgridvisible = false
axes_1C.xlabel = "MDS1 ($(round(kidsspeciesmdsaxes[1]*100, digits=2)) %)"
axes_1C.ylabel = "Age (years)"
axes_1C.xticksvisible=false
axes_1C.xticklabelsvisible=false
axes_1C.ylabelpadding=20
axes_1C.xlabelpadding=20


f1b = scatter!(axes_1B, Group(marker=ubothmeta.ageLabel), Style(color=ubothmeta.identifiable_unirefs),
        projection(unirefaccessorymds)[:,1] .* -1, projection(unirefaccessorymds)[:,2],  colormap=:solar,
        markersize = 15 * AbstractPlotting.px, marker=[:utriangle, :hexagon, :rect, :cross],
        strokecolor=:black, strokewidth=1)
axes_1B.xgridvisible = false
axes_1B.ygridvisible = false
axes_1B.xlabel = "MDS1 ($(round(unirefaccessorymdsaxes[1]*100, digits=2)) %)"
axes_1B.ylabel = "MDS2 ($(round(unirefaccessorymdsaxes[2]*100, digits=2)) %)"
axes_1B.xticksvisible=false
axes_1B.xticklabelsvisible=false
axes_1B.yticksvisible=false
axes_1B.yticklabelsvisible=false
axes_1B.ylabelpadding=20
axes_1B.xlabelpadding=20

f1b_colorbar_legend = LColorbar(scene, f1b, width=30)
f1b_colorbar_layout = gridnest!(layout_1ABCD, 1:2, 2)
f1b_colorbar_layout[1:2, 2] = f1b_colorbar_legend
f1b_colorbar_layout[1:2, 2, Left()] = LText(scene, "Fraction Identified", rotation = pi/2, padding = (0, 5, 0, 0))

f1d = scatter!(axes_1D, Group(marker=allkidsmeta.ageLabel), Style(color=allkidsmeta.n_unirefs),
            projection(kidsunirefaccessorymds)[:,1], allkidsmeta.correctedAgeDays ./ 365,
            markersize = 10 * AbstractPlotting.px,
            marker=[:utriangle, :hexagon, :rect, :cross],
            colormap=:BrBG,
            strokecolor=:black, strokewidth=1)
axes_1D.xgridvisible = false
axes_1D.xlabel = "MDS1 ($(round(kidsunirefaccessorymdsaxes[1]*100, digits=2)) %)"
axes_1D.ylabel = "Age (years)"
axes_1D.xticksvisible=false
axes_1D.xticklabelsvisible=false
axes_1D.ylabelpadding=20
axes_1D.xlabelpadding=20
f1d_legend = LColorbar(scene, f1d, width=30)
f1d_legend.ticks = let ur = ubothmeta.n_unirefs ./ 1e3
    r = range(floor(Int, minimum(ur)), stop=ceil(Int,maximum(ur)), length=6)
    ManualTicks(r .* 1e3, map(i-> join([floor(Int,i), " k"]), r))
end

f1d_layout = gridnest!(layout_1ABCD, 3, 2)
f1d_layout[1, 2] = f1d_legend
f1d_layout[1, 2, Left()] = LText(scene, "Number of UniRef90s", rotation = pi/2, padding = (0, 5, 0, 0))

scene
# Figure 1E

eyorder = [
    "subject",
    "subject type",
    "2+ subject type",
    "age",
    "2+ age",
    "child gender",
    "birth type",
    "mother SES",
    "cognitive function",
    "neocortical",
    "subcortical",
    "limbic",
    "cerebellar"
]
eysrt = reverse(invperm(sortperm(eyorder)))

exorder = [
    "species",
    "accessory",
    "kos",
    "pfams"
]
exsrt = reverse(invperm(sortperm(exorder)))

values = disallowmissing(r2m')[exsrt, eysrt]
xrange = 0:size(values,1)
yrange = 0:size(values,2)
hm = heatmap!(axes_1E, xrange, yrange, values, colorrange=(0,0.21), colormap=:PuBu)

pixelcentervalues = [Point2f0(x, y)
    for x in midpoints(LinRange(xrange.start, xrange.stop, size(values, 1) + 1)),
        y in midpoints(LinRange(yrange.start, yrange.stop, size(values, 2) + 1)) .- 0.1]
function rect_to_rect(fromrect, torect, point)
    pfrac = (point .- fromrect.origin) ./ fromrect.widths
    pfrac .* torect.widths .+ torect.origin
end
pixelvals = lift(axes_1E.limits, axes_1E.scene.px_area) do lims, pxa
    vec(rect_to_rect.(Ref(lims), Ref(pxa), pixelcentervalues))
end
labels = vec([string(v)[1:5] for v in values])
annotations!(scene, labels, pixelvals,
    align = (:center, :center),
    color = ifelse.(values .< 0.14, :black, :white),
    textsize = 16)

sig = vec(permutedims(replace(qa[eysrt, exsrt], "" => " ")))
annotations!(scene, sig, @lift($pixelvals .+ Ref(Point2f0(0, 10))),
    align = (:center, :center),
    color = ifelse.(values .< 0.14, :black, :white),
    textsize = 16)

# sigpixelvals = lift(axes_1E.limits, axes_1E.scene.px_area) do lims, pxa
#     vec(rect_to_rect.(Ref(lims), Ref(pxa), pixelcentervalues .+ Ref(Point2f0(0.2, 0))))
# end
# annotations!(scene, vec([v for v in sig]), sigpixelvals,
#     align = (:center, :center),
#     color = ifelse.(values .< 0.14, :black, :white),
#     textsize = 16)

tightlimits!(axes_1E)

axes_1E.yticks = ManualTicks(0.5:1:size(r2m,1) - 0.5, r2.label[eysrt])
tight_yticklabel_spacing!(axes_1E)

axes_1E.xticks = ManualTicks(0.5:1:size(r2,2) - 1.5, string.(names(r2)[2:end][exsrt]))

hm_legend = LColorbar(scene, hm, width=30)
hm_legend.ticks = let r = range(0, stop=0.20, length=6)
    t = string.(r)
    t[end] = join([">", t[end]])
    ManualTicks(r,t)
end
hm_layout = gridnest!(layout_1E, 1, 1)
hm_layout[1, 2] = hm_legend
hm_layout[1, 2, Left()] = LText(scene, "% Variance", rotation = pi/2, padding = (0, 5, 0, 0))


# Figure 1F

let filt = map(!ismissing, allkidsmeta.cogScore)
    x = disallowmissing(allkidsmeta.correctedAgeDays[filt] ./ 365)
    y = disallowmissing(allkidsmeta.cogScore[filt])
    g = disallowmissing(allkidsmeta.cogAssessment[filt])
    scatter!(axes_1F, Group(g), x, y,
                color=ColorSchemes.Set1_5.colors[2:end],
                markersize = 10 * AbstractPlotting.px,
                strokecolor=:black, strokewidth=1
                )

end
axes_1F.xlabel = "Age (years)"
axes_1F.ylabel = "Overall cognitive function"
axes_1F.xlabelpadding = 20
axes_1F.ylabelpadding = 20

f1f_layout = gridnest!(layout_1F, 1, 1)
legend_1F = f1f_layout[1, 2] = LLegend(scene, titlevisible=false, patchcolor=:transparent)
legend_1F.entries[] = LegendEntry.(
    string.(sort(unique(skipmissing(allkidsmeta.cogAssessment)))),
    [MarkerElement(marker=:circle, color=ColorSchemes.Set1_7.colors[i], strokecolor=:black) for i in 2:5]
    )


cs = copy(ColorSchemes.RdYlBu_9.colors)
gr = ColorSchemes.grays.colors[5]
cs = [cs[[1,2,4]]..., gr,cs[[end-2,end-1,end]]...]
legend_1G.entries[] = LegendEntry.(
    ["        ", "median < 0", "      ", "  ", "      ", "median > 0", "        ",
     "q < 0.001", "q < 0.01", "q < 0.1", "NS", "q < 0.1", "q < 0.01", "q < 0.001"],
    [
        MarkerElement(marker = :rect, color=:white, strokecolor=:white, patchcolor=:white),
        MarkerElement(marker = :rect, color=:white, strokecolor=:white, patchcolor=:white),
        MarkerElement(marker = :rect, color=:white, strokecolor=:white, patchcolor=:white),
        MarkerElement(marker = :rect, color=:white, strokecolor=:white, patchcolor=:white),
        MarkerElement(marker = :rect, color=:white, strokecolor=:white, patchcolor=:white),
        MarkerElement(marker = :rect, color=:white, strokecolor=:white, patchcolor=:white),
        MarkerElement(marker = :rect, color=:white, strokecolor=:white, patchcolor=:white),
        MarkerElement(marker = :rect, color = cs[1], strokecolor = :black),
        MarkerElement(marker = :rect, color = cs[2], strokecolor = :black),
        MarkerElement(marker = :rect, color = cs[3], strokecolor = :black),
        MarkerElement(marker = :rect, color = cs[4], strokecolor = :black),
        MarkerElement(marker = :rect, color = cs[5], strokecolor = :black),
        MarkerElement(marker = :rect, color = cs[6], strokecolor = :black),
        MarkerElement(marker = :rect, color = cs[7], strokecolor = :black)
    ]
)

allfsea.color = map(eachrow(allfsea)) do row
    m = row.median
    q = row.qvalue
    c = cs[4]
    if m > 0
        if q < 0.001
            c = cs[end]
        elseif q < 0.01
            c = cs[end-1]
        elseif q < 0.1
            c = cs[end-2]
        end
    elseif m < 0
        if q < 0.001
            c = cs[1]
        elseif q < 0.01
            c = cs[2]
        elseif q < 0.1
            c = cs[3]
        end
    end
    c
end


allfsea2 = vcat(
    (DataFrame((geneset=row.geneset,
                metadatum=row.metadatum,
                cor=i,
                color=row.color,
                qvalue=row.qvalue
                ) for i in row.cors)
    for row in eachrow(allfsea))...
    )
allfsea2.geneset = map(allfsea2.geneset) do gs
    gs = replace(gs, r" \(.+\)"=>"")
    gs = replace(gs, r"^.+Estradiol"=>"Estradiol")
    gs = replace(gs, "degradation"=>"deg")
    gs = replace(gs, "synthesis"=>"synth")
    gs
end

siggs = filter(row-> row.anysig, by(allfsea2, :geneset) do gs
                (anysig = any(<(0.1), gs.qvalue),)
            end).geneset |> Set

filter!(row-> row.geneset in siggs, allfsea2)
sort!(allfsea2, :geneset, rev=true)
let genesets = unique(allfsea2.geneset)
    gmap = Dict(g=>i for (i,g) in enumerate(genesets))
    allfsea2.gsindex = [gmap[g] for g in allfsea2.geneset]
end

groups = groupby(allfsea2, :metadatum)

let ugs = unique(allfsea2.geneset)
for (i, gr) in enumerate(groups[2:end])
    by(gr, :gsindex) do gs
        g = first(gs.geneset)
        x = gs.gsindex
        y = gs.cor
        c = first(gs.color)
        boxplot!(axes_1G[i], x, y, color=c, orientation=:horizontal,
            markersize = 10 * AbstractPlotting.px, outliercolor=c)
    end
    axes_1G[i].xlabel = first(gr.metadatum)
    axes_1G[i].xlabelpadding = 20
    axes_1G[i].yticks = ManualTicks(1:length(ugs), ugs)

    i !=1 && (axes_1G[i].yticklabelsvisible = false; axes_1G[i].yticksvisible = false)
end # for
end # let

extr = extrema(allfsea2.cor)
for i in 1:5
    xlims!(axes_1G[i], extr)
end
foreach(Union{LColorbar, LAxis}, layout) do obj
    tight_ticklabel_spacing!(obj)
end
save("data/analysis/figures/figure1/figure1-makie.jpg", scene, resolution=res);
```

```julia
# CairoMakie.activate!(type = "svg")
# save("data/analysis/figures/figure1/figure1-makie.svg", scene, resolution=res);
```


```julia
scene, layout = layoutscene()
lo = GridLayout()
p1 = lo[1,1] = LAxis(scene)
layout[1, 1] = lo

scatter!(p1, rand(10,2), markersize = AbstractPlotting.px *20)
p1.xticks = ManualTicks(0:0.25:1, string.(0:0.25:1))
p1.xgridcolor = ColorSchemes.Accent_3.colors

```
