# Supplementary Figures

```julia
using Pkg
Pkg.activate("./")
using JLD2
using DataFrames
using MultivariateStats
using MakieLayout
using AbstractPlotting
using StatsMakie
using Makie
using ColorSchemes
using Statistics
using StatsBase: midpoints
using Interpolations

AbstractPlotting.inline!(false)
@load "analysis/figures/assets/figure1a.jld2" speciesmds allmeta speciesmdsaxes color3
@load "analysis/figures/assets/figure1b.jld2" kidsspeciesmds kidsspeciesmdsaxes allkidsmeta
@load "analysis/figures/assets/figure1c.jld2" unirefaccessorymds ubothmeta unirefaccessorymdsaxes
@load "analysis/figures/assets/figure1d.jld2" kidsunirefaccessorymds kidsunirefaccessorymdsaxes
@load "analysis/figures/assets/figure1e.jld2" r2 r2m qa allpermanovas
@load "analysis/figures/assets/figure1g.jld2" allfsea mdcors
@load "analysis/figures/assets/s1.jld2" speciesdiffs unirefaccessorydiffs kosdiffs pfamsdiffs

allfsea.median = map(median, allfsea.cors)
rename!(r2, :unirefaccessory=>:accessory)
```
```julia
function makelong(diffdict, colors = ColorSchemes.Set3_5.colors, groupsize=4)
    df = DataFrame(xi = Int[], xlabel=String[], y = Float64[], color=[])
    i = 0
    for k1 in sort(keys(diffdict)|> collect)
        subdict = diffdict[k1]
        c = 0
        for k2 in sort(keys(subdict)|> collect)
            i+=1
            c+=1
            dists = subdict[k2]
            append!(df, ((xi = i + floor(Int, (i-0.1)/groupsize), xlabel="$k1 - $k2", y = d, color=colors[c]) for d in dists))
        end
    end
    filter!(row-> row.y != 0, df)
    return df
end
```
```julia
speciesdiffs2 = makelong(speciesdiffs)
unirefaccessorydiffs2 = makelong(unirefaccessorydiffs)
kosdiffs2 = makelong(kosdiffs)
pfamsdiffs2 = makelong(pfamsdiffs)
```

```julia
res = (4*300, 4*300)
scene, layout = layoutscene(resolution = res)

layout_diffs = GridLayout()

axes_diffs = layout_diffs[1:2,1:2] = [LAxis(scene, titlevisible=true) for row in 1:2, col in 1:2]

legend_diffs = layout_diffs[3,1:2] = LLegend(scene,
    [MarkerElement(marker = :rect, color=ColorSchemes.Set3_5.colors[i], strokecolor=:black) for i in 1:4],
    ["1 and under","1 to 2","2 and over","mom"],
    "Compared to",
    height=Auto(true), width=Auto(false), orientation=:horizontal)


layout[1, :] = LText(scene, text="Supplementary Figure 1", textsize=50, width=Auto(false))
layout[2,1] = layout_diffs
layout_diffs[1, 1, TopLeft()] = LText(scene, "a", textsize = 40, padding = (0, 0, 10, 0))
layout_diffs[1, 2, TopLeft()] = LText(scene, "b", textsize = 40, padding = (0, 0, 10, 0))
layout_diffs[2, 1, TopLeft()] = LText(scene, "c", textsize = 40, padding = (0, 0, 10, 0))
layout_diffs[2, 2, TopLeft()] = LText(scene, "d", textsize = 40, padding = (0, 0, 10, 0))


s1a = let
    plt = nothing
    by(speciesdiffs2, :xi) do df
        plt = boxplot!(axes_diffs[1,1], Data(df),
            :xi, :y,
            color=first(df.color), outliercolor=first(df.color),
            markersize = 7 * AbstractPlotting.px
            )
        end
    plt
end

s1b = let
    plt = nothing
    by(unirefaccessorydiffs2, :xi) do df
        plt = boxplot!(axes_diffs[1,2], Data(df),
            :xi, :y,
            color=first(df.color), outliercolor=first(df.color),
            markersize = 7 * AbstractPlotting.px
            )
        end
    plt
end

s1c = let
    plt = nothing
    by(pfamsdiffs2, :xi) do df
        plt = boxplot!(axes_diffs[2,1], Data(df),
            :xi, :y,
            color=first(df.color), outliercolor=first(df.color),
            markersize = 7 * AbstractPlotting.px
            )
        end
    plt
end

s1d = let
    plt = nothing
    by(kosdiffs2, :xi) do df
        plt = boxplot!(axes_diffs[2,2], Data(df),
            :xi, :y,
            color=first(df.color), outliercolor=first(df.color),
            markersize = 7 * AbstractPlotting.px
            )
        end
    plt
end

axes_diffs[1,1].title = "Species Diffs"
axes_diffs[1,2].title = "Accessory Diffs"
axes_diffs[2,1].title = "Pfams Diffs"
axes_diffs[2,2].title = "KOs Diffs"



for i in 1:4
    axes_diffs[i].xticks = ManualTicks(2.5:5:20, ["1 and under","1 to 2","2 and over","mom"])
    axes_diffs[i].xticksvisible = false
    axes_diffs[i].xgridvisible = false

    ylims!(axes_diffs[i], (0.,1))
end

save("analysis/figures/suppfigure_diffs.jpeg", scene, resolution=res)
scene
```

```julia
res=(1200, 1200)
scene, layout = layoutscene(resolution = res)

layout_all_mds = GridLayout()

axes_all_mds = layout_all_mds[1:2,1:2] = [LAxis(scene, titlevisible=true) for row in 1:2 for col in 1:2]
legend_all_mds = layout_all_mds[3,1:2] = LLegend(scene,
    [MarkerElement(marker = :circle, color=ColorSchemes.Set3_5.colors[i], strokecolor=:black) for i in 1:4],
    ["1 and under","1 to 2","2 and over","mom"],
    "Subject Age", orientation=:horizontal,
    height=Auto(true), width=Auto(false))



layout[1, :] = LText(scene, text="Supplementary Figure 2", textsize=50, width=Auto(false))
layout[2,1] = layout_all_mds
layout_all_mds[1, 1, TopLeft()] = LText(scene, "a", textsize = 40, padding = (0, 0, 10, 0))
layout_all_mds[1, 2, TopLeft()] = LText(scene, "b", textsize = 40, padding = (0, 0, 10, 0))
layout_all_mds[2, 1, TopLeft()] = LText(scene, "c", textsize = 40, padding = (0, 0, 10, 0))
layout_all_mds[2, 2, TopLeft()] = LText(scene, "d", textsize = 40, padding = (0, 0, 10, 0))
scene

all_mds_spec = scatter!(axes_all_mds[1], Style(color=allmeta.shannon),
        projection(speciesmds)[:,1] .* -1, projection(speciesmds)[:,2] .* -1,
        grid=false, color=ColorSchemes.Set3_5.colors[1:4],
        markersize = 15 * AbstractPlotting.px,
        strokecolor=:black, strokewidth=1)
axes_all_mds[1].xlabel = "MDS1 ($(round(speciesmdsaxes[1]*100, digits=2)) %)"
axes_all_mds[1].ylabel = "MDS2 ($(round(speciesmdsaxes[2]*100, digits=2)) %)"
axes_all_mds[1].title = "Taxonomic Profiles MDS"

all_mds_spec_colorbar_legend = LColorbar(scene, all_mds_spec, width=30)
all_mds_spec_colorbar_layout = gridnest!(layout_all_mds, 1, 1)
all_mds_spec_colorbar_layout[1, 2] = all_mds_spec_colorbar_legend
all_mds_spec_colorbar_layout[1, 2, Left()] = LText(scene, "Shannon Index", rotation = pi/2, padding = (0, 5, 0, 0))

all_mds_func = scatter!(axes_all_mds[2], Style(color=allmeta.identifiable_unirefs),
        projection(unirefaccessorymds)[:,1:2],
        grid=false,
        markersize = 15 * AbstractPlotting.px,
        strokecolor=:black, strokewidth=1, colormap=:solar)
axes_all_mds[2].xlabel = "MDS1 ($(round(unirefaccessorymdsaxes[1]*100, digits=2)) %)"
axes_all_mds[2].ylabel = "MDS2 ($(round(unirefaccessorymdsaxes[2]*100, digits=2)) %)"
axes_all_mds[2].title = "Uniref90 Accessory MDS"

all_mds_func_colorbar_legend = LColorbar(scene, all_mds_func, width=30)
all_mds_func_colorbar_layout = gridnest!(layout_all_mds, 1, 2)
all_mds_func_colorbar_layout[1, 2] = all_mds_func_colorbar_legend
all_mds_func_colorbar_layout[1, 2, Left()] = LText(scene, "Fraction Identified", rotation = pi/2, padding = (0, 5, 0, 0))


scatter!(axes_all_mds[3], Group(allmeta.ageLabel),
        projection(speciesmds)[:,1] .* -1, projection(speciesmds)[:,2] .* -1,
        grid=false, color=ColorSchemes.Set3_5.colors[1:4],
        markersize = 15 * AbstractPlotting.px,
        strokecolor=:black, strokewidth=1)
axes_all_mds[3].xlabel = "MDS1 ($(round(speciesmdsaxes[1]*100, digits=2)) %)"
axes_all_mds[3].ylabel = "MDS2 ($(round(speciesmdsaxes[2]*100, digits=2)) %)"
axes_all_mds[3].title = "Taxonomic Profiles MDS"

scatter!(axes_all_mds[4], Group(ubothmeta.ageLabel),
        projection(unirefaccessorymds)[:,1:2],
        grid=false, color=ColorSchemes.Set3_5.colors[1:4],
        markersize = 15 * AbstractPlotting.px,
        strokecolor=:black, strokewidth=1)
axes_all_mds[4].xlabel = "MDS1 ($(round(unirefaccessorymdsaxes[1]*100, digits=2)) %)"
axes_all_mds[4].ylabel = "MDS2 ($(round(unirefaccessorymdsaxes[2]*100, digits=2)) %)"
axes_all_mds[4].title = "Uniref90 Accessory MDS"


for i in 1:4
    axes_all_mds[i].ygridvisible = false
    axes_all_mds[i].ygridvisible = false
    axes_all_mds[i].xgridvisible = false
    axes_all_mds[i].xgridvisible = false
    axes_all_mds[i].xticksvisible=false
    axes_all_mds[i].xticklabelsvisible=false
    axes_all_mds[i].yticksvisible=false
    axes_all_mds[i].yticklabelsvisible=false
    axes_all_mds[i].ylabelpadding=20
    axes_all_mds[i].xlabelpadding=20
end


save("analysis/figures/suppfigure_all_mds.jpeg", scene, resolution=res)
scene
```


```julia
res=(1200, 1200)
scene, layout = layoutscene(resolution = res)

layout_pcopri = GridLayout()

axes_pcopri = layout_pcopri[1,1] = LAxis(scene, titlevisible=true)
marker_legend_pcopri = layout_pcopri[2,1] = LLegend(scene,
    [
    MarkerElement(marker = :utriangle, color=:white, strokecolor=:black),
    MarkerElement(marker = :hexagon, color=:white, strokecolor=:black),
    MarkerElement(marker = :rect, color=:white, strokecolor=:black),
    MarkerElement(marker = :cross, color=:white, strokecolor=:black)
    ],
    [
    "1 and under",
    "1 to 2",
    "2 and over",
    "mom"
    ],
    "Subject Age", height=Auto(true), width=Auto(false), orientation=:horizontal)

layout[1, 1] = LText(scene, text="Supplementary Figure 3", textsize=50, width=Auto(false))


layout[2,1] = layout_pcopri
scene
pcopri = scatter!(axes_pcopri, Group(marker=allmeta.ageLabel),
        Style(color=log2.(allmeta.pcopri .+ (minimum(allmeta.pcopri) / 4))), grid=false,
        projection(speciesmds)[:,1:2] .* -1,
        markersize = 15 * AbstractPlotting.px, marker=[:utriangle, :hexagon, :rect, :cross],
        strokecolor=:black, strokewidth=1, colormap=:BuPu)
axes_pcopri.xlabel = "MDS1 ($(round(speciesmdsaxes[1]*100, digits=2)) %)"
axes_pcopri.ylabel = "MDS2 ($(round(speciesmdsaxes[2]*100, digits=2)) %)"
axes_pcopri.ygridvisible = false
axes_pcopri.ygridvisible = false
axes_pcopri.xgridvisible = false
axes_pcopri.xgridvisible = false
axes_pcopri.xticksvisible=false
axes_pcopri.xticklabelsvisible=false
axes_pcopri.yticksvisible=false
axes_pcopri.yticklabelsvisible=false
axes_pcopri.ylabelpadding=20
axes_pcopri.xlabelpadding=20

pcopri_colorbar_legend = LColorbar(scene, pcopri, width=30)
pcopri_colorbar_layout = gridnest!(layout_pcopri, 1, 1)
pcopri_colorbar_layout[1, 2] = pcopri_colorbar_legend
pcopri_colorbar_layout[1, 2, Left()] = LText(scene, "log2(P. copri abundance)", rotation = pi/2, padding = (0, 5, 0, 0))


save("analysis/figures/suppfigure_pcopri.jpeg", scene, resolution=res)
scene
```

```julia
res=(1200, 1200)
scene, layout = layoutscene(resolution = res)

layout[1, 1:2] = LText(scene, text="Supplementary Figure 4", textsize=50, width=Auto(false))

layout[2:4,1:2] = layout_fsea_hist = GridLayout()
scene


layout_fsea_hist[1,1] = fsea_hist_cogScore = LAxis(scene)
plot!(fsea_hist_cogScore, histogram, mdcors[:cogScore])
fsea_hist_cogScore.title = "Correlations with cogScore"
layout_fsea_hist[1,2] = fsea_hist_neocortical_normed = LAxis(scene)
plot!(fsea_hist_neocortical_normed, histogram, mdcors[:neocortical_normed])
fsea_hist_neocortical_normed.title = "Correlations with neocortical_normed"
layout_fsea_hist[2,1] = fsea_hist_subcortical_normed = LAxis(scene)
plot!(fsea_hist_subcortical_normed, histogram, mdcors[:subcortical_normed])
fsea_hist_subcortical_normed.title = "Correlations with subcortical_normed"
layout_fsea_hist[2,2] = fsea_hist_limbic_normed = LAxis(scene)
plot!(fsea_hist_limbic_normed, histogram, mdcors[:limbic_normed])
fsea_hist_limbic_normed.title = "Correlations with limbic_normed"
layout_fsea_hist[3,1] = fsea_hist_cerebellar_normed = LAxis(scene)
plot!(fsea_hist_cerebellar_normed, histogram, mdcors[:cerebellar_normed])
fsea_hist_cerebellar_normed.title = "Correlations with cerebellar_normed"


layout_fsea_hist[1, 1, TopLeft()] = LText(scene, "a", textsize = 40, padding = (0, 0, 10, 0))
layout_fsea_hist[1, 2, TopLeft()] = LText(scene, "b", textsize = 40, padding = (0, 0, 10, 0))
layout_fsea_hist[2, 1, TopLeft()] = LText(scene, "c", textsize = 40, padding = (0, 0, 10, 0))
layout_fsea_hist[2, 2, TopLeft()] = LText(scene, "d", textsize = 40, padding = (0, 0, 10, 0))
layout_fsea_hist[3, 1, TopLeft()] = LText(scene, "b", textsize = 40, padding = (0, 0, 10, 0))

foreach(LAxis, layout) do obj
    tight_ticklabel_spacing!(obj)
    obj.ylabel = "count"
    obj.xlabel = "Pearson correlation"
end

save("analysis/figures/suppfigure_fsea_hist.jpeg", scene, resolution=res)
scene
```
```julia
res=(1200, 1200)
scene, layout = layoutscene(resolution = res)

layout[1,1] = layout_fsea_hist = GridLayout()
scene

# this works
layout_fsea_hist[1,1] = works = LAxis(scene)
plot!(works, rand(10,2))
# this doesn't
layout_fsea_hist[1,2] = LAxis(scene)
plot!(layout_fsea_hist[1,2], rand(10,2))
```
