```julia
using Pkg
Pkg.activate("analysis/")
using JLD2
using DataFrames
using MultivariateStats
using MakieLayout
using AbstractPlotting
using StatsMakie
using CairoMakie
using Makie
using ColorSchemes
using Statistics

AbstractPlotting.inline!(false)

@load "analysis/notebooks/figure1assets/figure1a1.jld2" speciesmds allmeta speciesmdsaxes color3
@load "analysis/notebooks/figure1assets/figure1a3.jld2" kidsspeciesmds kidsspeciesmdsaxes allkidsmeta
@load "analysis/notebooks/figure1assets/figure1b1.jld2" unirefaccessorymds ubothmeta unirefaccessorymdsaxes
@load "analysis/notebooks/figure1assets/figure1b3.jld2" kidsunirefaccessorymds kidsunirefaccessorymdsaxes
@load "analysis/notebooks/figure1assets/figure1d.jld2" r2 r2m qa
@load "analysis/notebooks/figure1assets/figure1ef.jld2" allfsea
@load "analysis/notebooks/suppfigureassets/s1.jld2" speciesdiffs unirefaccessorydiffs kosdiffs pfamsdiffs keypairs

allfsea.median = map(median, allfsea.cors)
rename!(r2, :unirefaccessory=>:accessory)
```
```julia
scene, layout = layoutscene()
layout_1AB = GridLayout()
layout_1CD = GridLayout()
layout_1E = GridLayout(alignmode=Outside())
layout_1E_leg = GridLayout()


axes_1A_top       = layout_1AB[1:2, 1]   = LAxis(scene)
axes_1A_bottom    = layout_1AB[3, 1]   = LAxis(scene)

axes_1B_top       = layout_1AB[1:2, 2]   = LAxis(scene)
axes_1B_bottom    = layout_1AB[3, 2]   = LAxis(scene)

legend_1AB_markers = layout_1AB[4, 1:2]   = LLegend(scene, nrows=1, ncols=4, height=Auto(false), width=Auto(false), titlevisible=false)

axes_1C = layout_1CD[1:2, 1] =  LAxis(scene,
                                    xticklabelrotation = pi/4,
                                    xticklabelalign = (:right, :center))
axes_1D = layout_1CD[3, 1]   =  LAxis(scene)
axes_1E = layout_1E[1, 1:5]  = [LAxis(scene) for col in 1:5]
legend_1E = layout_1E_leg[1, 1:5]  = LLegend(scene, height=100,
                                            ncols=7, nrows=2, titlevisible=false)

layout[1:3, 1:2] = layout_1AB
layout[1:3, 3] = layout_1CD
layout[4:5, 1:3] = layout_1E
layout[6, 1:3] = layout_1E_leg

layout[1, 1, TopLeft()] = LText(scene, "A", textsize = 40, padding = (0, 30, 10, 0))
layout[1, 2, TopLeft()] = LText(scene, "B", textsize = 40, padding = (0, 30, 10, 0))
layout[1, 3, TopLeft()] = LText(scene, "C", textsize = 40, padding = (0, 30, 10, 0))
layout[3, 3, TopLeft()] = LText(scene, "D", textsize = 40, padding = (0, 30, 10, 0))
layout[4, 1, TopLeft()] = LText(scene, "E", textsize = 40, padding = (0, 30, 10, 0))
# scene
```

```julia
f1a = scatter!(axes_1A_top, Group(marker=allmeta.ageLabel), Style(color=allmeta.shannon),
        projection(speciesmds)[:,1:2],
        markersize = 15 * AbstractPlotting.px, marker=[:utriangle, :hexagon, :rect, :cross],
        strokecolor=:black, strokewidth=1)
axes_1A_top.xlabel = "MDS1 ($(round(speciesmdsaxes[1]*100, digits=2)) %)"
axes_1A_top.ylabel = "MDS2 ($(round(speciesmdsaxes[2]*100, digits=2)) %)"
axes_1A_top.xticksvisible=false
axes_1A_top.xticklabelsvisible=false
axes_1A_top.yticksvisible=false
axes_1A_top.yticklabelsvisible=false
axes_1A_top.ylabelpadding=20
axes_1A_top.xlabelpadding=20

legend_1AB_markers.entries[] = LegendEntry.(
    [">1", "1-2", "<2", "mom"],
    [
        MarkerElement(marker = :utriangle, color=:white, strokecolor=:black),
        MarkerElement(marker = :hexagon, color=:white, strokecolor=:black),
        MarkerElement(marker = :rect, color=:white, strokecolor=:black),
        MarkerElement(marker = :cross, color=:white, strokecolor=:black),
    ]
)

f1a_colorbar_legend = LColorbar(scene, f1a, width=30)
f1a_colorbar_layout = gridnest!(layout_1AB, 1:3, 1)
f1a_colorbar_layout[1:3, 2] = f1a_colorbar_legend
f1a_colorbar_layout[1:3, 2, Left()] = LText(scene, "Shannon Index", rotation = pi/2, padding = (0, 5, 0, 0))

f1a2 = scatter!(axes_1A_bottom, Group(marker=allkidsmeta.ageLabel),
        projection(kidsspeciesmds)[:,1], allkidsmeta.correctedAgeDays ./ 365,
        markersize = 10 * AbstractPlotting.px, marker=marker=[:utriangle, :hexagon, :rect],
        color=allkidsmeta.shannon,
        strokecolor=:black, strokewidth=1)
axes_1A_bottom.xlabel = "MDS1 ($(round(kidsspeciesmdsaxes[1]*100, digits=2)) %)"
axes_1A_bottom.ylabel = "Age (years)"
axes_1A_bottom.xticksvisible=false
axes_1A_bottom.xticklabelsvisible=false
axes_1A_bottom.yticksvisible=false
axes_1A_bottom.yticklabelsvisible=false
axes_1A_bottom.ylabelpadding=20
axes_1A_bottom.xlabelpadding=20


f1b = scatter!(axes_1B_top, Group(marker=ubothmeta.ageLabel), Style(color=ubothmeta.identifiable_unirefs),
        projection(unirefaccessorymds)[:,1:2],  colormap=:solar,
        markersize = 15 * AbstractPlotting.px, marker=[:utriangle, :hexagon, :rect, :cross],
        strokecolor=:black, strokewidth=1)
axes_1B_top.xlabel = "MDS1 ($(round(unirefaccessorymdsaxes[1]*100, digits=2)) %)"
axes_1B_top.ylabel = "MDS2 ($(round(unirefaccessorymdsaxes[2]*100, digits=2)) %)"
axes_1B_top.xticksvisible=false
axes_1B_top.xticklabelsvisible=false
axes_1B_top.yticksvisible=false
axes_1B_top.yticklabelsvisible=false
axes_1B_top.ylabelpadding=20
axes_1B_top.xlabelpadding=20

f1b_colorbar_legend = LColorbar(scene, f1b, width=30)
f1b_colorbar_layout = gridnest!(layout_1AB, 1:2, 2)
f1b_colorbar_layout[1:2, 2] = f1b_colorbar_legend
f1b_colorbar_layout[1:2, 2, Left()] = LText(scene, "Shannon Index", rotation = pi/2, padding = (0, 5, 0, 0))

f1b2 = scatter!(axes_1B_bottom, projection(kidsunirefaccessorymds)[:,1], allkidsmeta.correctedAgeDays ./ 365,
            markersize = 10 * AbstractPlotting.px,
            color=allkidsmeta.n_unirefs, colormap=:BrBG,
            strokecolor=:black, strokewidth=1)
axes_1B_bottom.xlabel = "MDS1 ($(round(kidsunirefaccessorymdsaxes[1]*100, digits=2)) %)"
axes_1B_bottom.ylabel = "Age (years)"
axes_1B_bottom.xticksvisible=false
axes_1B_bottom.xticklabelsvisible=false
axes_1B_bottom.yticksvisible=false
axes_1B_bottom.yticklabelsvisible=false
axes_1B_bottom.ylabelpadding=20
axes_1B_bottom.xlabelpadding=20
f1b2_legend = LColorbar(scene, f1b2, width=30)
f1b2_legend.ticks = let ur = ubothmeta.n_unirefs ./ 1e3
    r = range(floor(Int, minimum(ur)), stop=ceil(Int,maximum(ur)), length=6)
    ManualTicks(r .* 1e3, map(i-> join([floor(Int,i), " k"]), r))
end

f1b2_layout = gridnest!(layout_1AB, 3, 2)
f1b2_layout[1, 2] = f1b2_legend
f1b2_layout[1, 2, Left()] = LText(scene, "Number of UniRef90s", rotation = pi/2, padding = (0, 5, 0, 0))

let filt = map(!ismissing, allkidsmeta.cogScore)
    x = disallowmissing(allkidsmeta.correctedAgeDays[filt] ./ 365)
    y = disallowmissing(allkidsmeta.cogScore[filt])
    g = disallowmissing(allkidsmeta.cogAssessment[filt])
    scatter!(axes_1D, Group(g), x, y,
                color=ColorSchemes.Set1_5.colors[2:end],
                markersize = 10 * AbstractPlotting.px,
                strokecolor=:black, strokewidth=1
                )

end
axes_1D.xlabel = "Age (years)"
axes_1D.ylabel = "Overall cognitive function"
axes_1D.xlabelpadding = 20
axes_1D.ylabelpadding = 20
f1d1_legend = makescatterlegend(scene, string.(sort(unique(skipmissing(allkidsmeta.cogAssessment)))), ColorSchemes.Set1_7.colors[2:end])
f1d1_layout = gridnest!(layout_1CD, 3, 1)
f1d1_layout[1, 2] = f1d1_legend




using StatsBase: midpoints
values = disallowmissing(r2m')
xrange = 0:size(values,1)
yrange = 0:size(values,2)
hm = heatmap!(axes_1C, xrange, yrange, values, colorrange=(0,0.21), colormap=:PuBu)

pixelcentervalues = [Point2f0(x, y)
    for x in midpoints(LinRange(xrange.start, xrange.stop, size(values, 1) + 1)),
        y in midpoints(LinRange(yrange.start, yrange.stop, size(values, 2) + 1))]
function rect_to_rect(fromrect, torect, point)
    pfrac = (point .- fromrect.origin) ./ fromrect.widths
    pfrac .* torect.widths .+ torect.origin
end
pixelvals = lift(axes_1C.limits, axes_1C.scene.px_area) do lims, pxa
    vec(rect_to_rect.(Ref(lims), Ref(pxa), pixelcentervalues))
end
labels = vec([string(v)[1:5] for v in values])
annotations!(scene, labels, pixelvals,
    align = (:center, :center),
    color = ifelse.(values .< 0.14, :black, :white),
    textsize = 16)

sig = vec(permutedims(replace(qa, "" => " ")))
annotations!(scene, sig, @lift($pixelvals .+ Ref(Point2f0(0, 14))),
    align = (:center, :center),
    color = ifelse.(values .< 0.14, :black, :white),
    textsize = 16)

# sigpixelvals = lift(axes_1C.limits, axes_1C.scene.px_area) do lims, pxa
#     vec(rect_to_rect.(Ref(lims), Ref(pxa), pixelcentervalues .+ Ref(Point2f0(0.2, 0))))
# end
# annotations!(scene, vec([v for v in sig]), sigpixelvals,
#     align = (:center, :center),
#     color = ifelse.(values .< 0.14, :black, :white),
#     textsize = 16)

tightlimits!(axes_1C)

axes_1C.yticks = ManualTicks(0.5:1:size(r2m,1) - 0.5, r2.label)
tight_yticklabel_spacing!(axes_1C)

axes_1C.xticks = ManualTicks(0.5:1:size(r2,2) - 1.5, string.(names(r2)[2:end]))

hm_legend = LColorbar(scene, hm, width=30)
hm_legend.ticks = let r = range(0, stop=0.20, length=6)
    t = string.(r)
    t[end] = join([">", t[end]])
    ManualTicks(r,t)
end
hm_layout = gridnest!(layout_1CD, 1:2, 1)
hm_layout[1:2, 2] = hm_legend
hm_layout[1:2, 2, Left()] = LText(scene, "% Variance", rotation = pi/2, padding = (0, 5, 0, 0))

foreach(Union{LColorbar, LAxis}, layout) do obj
    tight_ticklabel_spacing!(obj)
end
# scene
```

```julia
cs = copy(ColorSchemes.RdYlBu_9.colors)
gr = ColorSchemes.grays.colors[5]
cs = [cs[[1,2,4]]..., gr,cs[[end-2,end-1,end]]...]
legend_1E.entries[]
legend_1E.entries[] = LegendEntry.(
    ["        ", "median < 0", "      ", "  ", "      ", "median > 0", "        ",
     "q < 0.001", "q < 0.01", "q < 0.1", "NS", "q < 0.001", "q < 0.01", "q < 0.1"],
    [
        MarkerElement(marker = :rect, color=:white, strokecolor=:white, patchcolor=:white),
        MarkerElement(marker = :rect, color=:white, strokecolor=:white, patchcolor=:white),
        MarkerElement(marker = :rect, color=:white, strokecolor=:white, patchcolor=:white),
        MarkerElement(marker = :rect, color=:white, strokecolor=:white, patchcolor=:white),
        MarkerElement(marker = :rect, color=:white, strokecolor=:white, patchcolor=:white),
        MarkerElement(marker = :rect, color=:white, strokecolor=:white, patchcolor=:white),
        MarkerElement(marker = :rect, color=:white, strokecolor=:white, patchcolor=:white),
        MarkerElement(marker = :rect, color = cs[1], strokecolor = :black),
        MarkerElement(marker = :rect, color = cs[2], strokecolor = :black),
        MarkerElement(marker = :rect, color = cs[3], strokecolor = :black),
        MarkerElement(marker = :rect, color = cs[4], strokecolor = :black),
        MarkerElement(marker = :rect, color = cs[5], strokecolor = :black),
        MarkerElement(marker = :rect, color = cs[6], strokecolor = :black),
        MarkerElement(marker = :rect, color = cs[7], strokecolor = :black)
    ]
)

allfsea.color = map(eachrow(allfsea)) do row
    m = row.median
    q = row.qvalue
    c = cs[4]
    if m > 0
        if q < 0.001
            c = cs[end]
        elseif q < 0.01
            c = cs[end-1]
        elseif q < 0.1
            c = cs[end-2]
        end
    elseif m < 0
        if q < 0.001
            c = cs[1]
        elseif q < 0.01
            c = cs[2]
        elseif q < 0.1
            c = cs[3]
        end
    end
    c
end


allfsea2 = vcat(
    (DataFrame((geneset=row.geneset,
                metadatum=row.metadatum,
                cor=i,
                color=row.color,
                qvalue=row.qvalue
                ) for i in row.cors)
    for row in eachrow(allfsea))...
    )
allfsea2.geneset = map(allfsea2.geneset) do gs
    gs = replace(gs, r" \(.+\)"=>"")
    gs = replace(gs, r"^.+Estradiol"=>"Estradiol")
    gs = replace(gs, "degradation"=>"deg")
    gs = replace(gs, "synthesis"=>"synth")
    gs
end

siggs = filter(row-> row.anysig, by(allfsea2, :geneset) do gs
                (anysig = any(<(0.1), gs.qvalue),)
            end).geneset |> Set

filter!(row-> row.geneset in siggs, allfsea2)
sort!(allfsea2, :geneset)
let genesets = unique(allfsea2.geneset)
    gmap = Dict(g=>i for (i,g) in enumerate(genesets))
    allfsea2.gsindex = [gmap[g] for g in allfsea2.geneset]
end

groups = groupby(allfsea2, :metadatum)
```

```julia
for (i, gr) in enumerate(groups[2:end])
    by(gr, :gsindex) do gs
        g = first(gs.geneset)
        x = gs.gsindex
        y = gs.cor
        c = first(gs.color)
        boxplot!(axes_1E[i], x, y, color=c, orientation=:horizontal,
            markersize = 10 * AbstractPlotting.px)
    end
    axes_1E[i].xlabel = first(gr.metadatum)
    axes_1E[i].xlabelpadding = 20
    if i == 1
        ugs = unique(gr.geneset)
        axes_1E[i].yticks = ManualTicks(1:length(ugs), ugs)
    else
        # axes_1E[i].yticksvisible = false
        axes_1E[i].yticklabelsvisible = false
    end
end

foreach(Union{LColorbar, LAxis}, layout) do obj
    tight_ticklabel_spacing!(obj)
end

scene
```

```julia
scene, layout = layoutscene()
ax = layout[1,1] = LAxis(scene, xticklabelrotation = pi/2,
                                xticklabelalign = (:right, :center))

by(groups[2], :gsindex) do gs
    g = first(gs.geneset)
    x = gs.gsindex
    y = gs.cor
    c = first(gs.color)
    boxplot!(ax, x, y, color=c,
        markersize = 10 * AbstractPlotting.px, ylims=cor_ext)
end
ax.ylabel = first(groups[2].metadatum)
let gs = unique(groups[2].geneset)
    ax.xticks = ManualTicks(1:length(gs), gs)
end
tight_ticklabel_spacing!(ax)
scene
```

```julia
# f1a1leg = LLegend(ul_axes[1], sort(unique(allmeta.ageLabel)[1]), ["moms"])
# f1a2legend = colorlegend(f1a2[end], raw = true, camera = campixel!)
# f1a3legend = colorlegend(f1a3[end], raw = true, camera = campixel!)
# f1b1legend = legend(f1b1, sort(unique(ubothmeta.ageLabel)))
# f1b2legend = colorlegend(f1b2[end], raw=true, camera=campixel!)
# f1b3legend = colorlegend(f1b3[end], raw=true, camera=campixel!)
```
