---
title: "Notebook 9: Miscellaneous work to prep for paper"
author: "Kevin Bonham, PhD"
options:
    line_width : 120
    wrap : false
---

## Cohort descriptions


```julia; echo=false; results="hidden"
using Pkg
Pkg.activate("analysis")
using Revise
```

```julia; results="hidden"
using ECHOAnalysis
using DataFrames
using PrettyTables
using SQLite
using Statistics
using CSV
using Microbiome
using StatsPlots
using MultivariateStats
using Distances
using Combinatorics

rounder = Dict(0 => (v,i) -> typeof(v) <: AbstractFloat ? round(v,digits=4) : v)
# # print ~15 random rows
# randrowfilter(data, i) = rand() < (1 / size(data, 1)) * 15
@ptconfclean # clear previous configuration
@ptconf formatter = rounder
@ptconf nosubheader=true
@ptconf screen_size=(20,70) # change to (20, 120) for weave
# @ptconf filters_row=(randrowfilter,)

includet("accessories.jl")

config = Pkg.TOML.parsefile("data/data.toml")
figures = config["output"]["figures"]
tables = config["output"]["tables"]
isdir(figures) || mkpath(figures)
isdir(tables) || mkpath(tables)
```
```julia; results="hidden"
taxdb = SQLite.DB(config["sqlite"]["taxa"]["path"])
species = sqlprofile(taxdb, tablename="taxa", kind="species")

pfamdb = SQLite.DB(config["sqlite"]["pfam"]["path"])
pfams = sqlprofile(pfamdb, tablename="pfam_names_relab", kind="pfam_names_relab")

kodb = SQLite.DB(config["sqlite"]["ko"]["path"])
kos = sqlprofile(kodb, tablename="ko_names_relab", kind="ko_names_relab")

shared = stoolsample.(intersect(samplenames(species), samplenames(pfams), samplenames(kos)))
sharedmeta = getmgxmetadata(samples=shared)
filter!(row-> !ismissing(row.ageLabel), sharedmeta)
shared = stoolsample.(sharedmeta.sample)

species = view(species, sites=sharedmeta.sample) |> copy
pfams = view(pfams, sites=sharedmeta.sample) |> copy
kos = view(kos, sites=sharedmeta.sample) |> copy
```

```julia; results="hidden"
kidssamples = uniquetimepoints(shared, samplefilter=iskid)
kidsmeta = getmgxmetadata(samples=kidssamples)
momssamples = uniquetimepoints(shared, samplefilter=ismom)
momsmeta = getmgxmetadata(samples=momssamples)
uniquekidssamples = uniquetimepoints(shared, samplefilter=iskid, takefirst=true)
uniquekidsmeta = getmgxmetadata(samples=uniquekidssamples)
uniquemomssamples = uniquetimepoints(shared, samplefilter=ismom, takefirst=true)
uniquemomsmeta = getmgxmetadata(samples=uniquemomssamples)
```

```julia; results="hidden"
upfams = view(pfams, sites=[uniquekidsmeta.sample; uniquemomsmeta.sample])
ukos = view(kos, sites=[uniquekidsmeta.sample; uniquemomsmeta.sample])
uspecies = view(species, sites=[uniquekidsmeta.sample; uniquemomsmeta.sample])
```

```julia; results="hidden"
speciesdm = pairwise(BrayCurtis(), species)
speciesmds = fit(MDS, speciesdm, distances=true)
pfamsdm = pairwise(BrayCurtis(), pfams)
pfamsmds = fit(MDS, pfamsdm, distances=true)
kosdm = pairwise(BrayCurtis(), kos)
kosmds = fit(MDS, kosdm, distances=true)

uspeciesdm = pairwise(BrayCurtis(), uspecies)
uspeciesmds = fit(MDS, uspeciesdm, distances=true)
upfamsdm = pairwise(BrayCurtis(), upfams)
upfamsmds = fit(MDS, upfamsdm, distances=true)
ukosdm = pairwise(BrayCurtis(), ukos)
ukosmds = fit(MDS, ukosdm, distances=true)
```



```julia; results="hidden"
function labeldiff(dm, labels)
    u = sort(unique(labels))
    d = Dict(u1 => Dict() for u1 in u)
    for (l1 , l2) in multiset_permutations(repeat(u,2), 2)

        l1pos = findall(isequal(l1), labels)
        l2pos = findall(isequal(l2), labels)
        ds = vec(dm[l1pos, l2pos])
        d[l1][l2] = ds
    end
    d
end

speciesdiffs = labeldiff(uspeciesdm, [uniquekidsmeta.ageLabel; uniquemomsmeta.ageLabel])
pfamsdiffs = labeldiff(upfamsdm, [uniquekidsmeta.ageLabel; uniquemomsmeta.ageLabel])
kosdiffs = labeldiff(ukosdm, [uniquekidsmeta.ageLabel; uniquemomsmeta.ageLabel])

keypairs = multiset_permutations(repeat(sort(collect(keys(speciesdiffs))),2), 2)
```
```julia
boxplot([filter(>(0.), speciesdiffs[k][l]) for (k, l) in keypairs], xticks = (1:length(keypairs), ["$k-$l" for (k,l) in keypairs]),
    xrotation=45, color=color2[1:4]', legend=false, ylabel="Bray Curtis dissimilarity",
    ylims=(0., 1.), title="Species Diffs")
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "12-species-diffs-boxplot.svg"))
```

```julia
boxplot([filter(>(0.), pfamsdiffs[k][l]) for (k, l) in keypairs], xticks = (1:length(keypairs), ["$k-$l" for (k,l) in keypairs]),
    xrotation=45, color=color2[1:4]', legend=false, ylabel="Bray Curtis dissimilarity",
    ylims=(0., 1.), title="Pfam Diffs")
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "12-pfams-diffs-boxplot.svg"))
```

```julia
boxplot([filter(>(0.), kosdiffs[k][l]) for (k, l) in keypairs], xticks = (1:length(keypairs), ["$k-$l" for (k,l) in keypairs]),
    xrotation=45, color=color2[1:4]', legend=false, ylabel="Bray Curtis dissimilarity",
    ylims=(0., 1.), title="KO Diffs")
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "12-kos-diffs-boxplot.svg"))
```

```julia; results="hidden"
Microbiome.prevalence(a, minabundance::Float64=0.0001) = mean(x-> present(x, minabundance), (y for y in a))
upfamsaccessory = view(upfams, species=map(row-> prevalence(row, 0.) < 0.9, eachrow(occurrences(upfams)))) |> copy
ukosaccessory = view(ukos, species=map(row-> prevalence(row, 0.) < 0.9, eachrow(occurrences(ukos)))) |> copy

upfamsaccessorydm = pairwise(BrayCurtis(), upfamsaccessory)
upfamsaccessorymds = fit(MDS, upfamsaccessorydm, distances=true)
ukosaccessorydm = pairwise(BrayCurtis(), ukosaccessory)
ukosaccessorymds = fit(MDS, ukosaccessorydm, distances=true)

pfamsaccessorydiffs = labeldiff(upfamsaccessorydm, [uniquekidsmeta.ageLabel; uniquemomsmeta.ageLabel])
kosaccessorydiffs = labeldiff(ukosaccessorydm, [uniquekidsmeta.ageLabel; uniquemomsmeta.ageLabel])
```

```julia
boxplot([filter(>(0.), pfamsaccessorydiffs[k][l]) for (k, l) in keypairs], xticks = (1:length(keypairs), ["$k-$l" for (k,l) in keypairs]),
    xrotation=45, color=color2[1:4]', legend=false, ylabel="Bray Curtis dissimilarity",
    ylims=(0., 1.), title="Pfam Accessory Diffs")
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "12-pfams-accessory-diffs-boxplot.svg"))
```

```julia
boxplot([filter(>(0.), kosaccessorydiffs[k][l]) for (k, l) in keypairs], xticks = (1:length(keypairs), ["$k-$l" for (k,l) in keypairs]),
    xrotation=45, color=color2[1:4]', legend=false, ylabel="Bray Curtis dissimilarity",
    ylims=(0., 1.), title="KO Accessory Diffs")
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "12-kos-accessory-diffs-boxplot.svg"))
```


## PERMANOVA heatmaps

```julia
permanovas = filter(t-> occursin("permanova", t), readdir(tables))
permanovas =vcat(CSV.read.(joinpath.(tables, permanovas))...)
perm2 = filter(row-> row.variable != "Subject ID", permanovas)

r2 = unstack(permanovas, :variable, :feature, :R2)
r2m = Matrix(r2[!,[:species,:pfams, :kos]])
q = unstack(permanovas, :variable, :feature, :q_value)
qm = Matrix(q[!,[:species,:pfams, :kos]])

qa = let M = fill("", size(qm))
    for i in eachindex(qm)
        ismissing(qm[i]) && continue
        if qm[i] < 0.001
            M[i] = "***"
        elseif qm[i] < 0.01
            M[i] = "**"
        elseif qm[i] < 0.1
            M[i] = "*"
        end
    end
    M
end

hm = heatmap(r2m, color=:PuBu, clims=(0.,0.2),
    yticks=(1:size(r2m, 1), r2[:variable]),
    xticks=(1:size(r2m, 2), names(r2)[2:end]))


for (i, col) in enumerate(eachcol(qa))
    annotate!(hm, [(i, c+.2, text(col[c], 8)) for c in eachindex(col)])
    annotate!(hm, [(i, c, text(
                    ismissing(r2m[c,i]) ?
                    "missing" :
                    "$(round(r2m[c,i] *100, digits=2))%",
                    8)) for c in eachindex(col)])
end
display(hm)
```
```julia
savefig(joinpath(figures, "12-permanovas-heatmap.svg"))
```




## Cluster/permutation analysis

```julia
labels = umeta.ageLabel

dm = pairwise(BrayCurtis(), uabt, dims=2)

let notmissing = map(!ismissing, labels)
    global dm = dm[notmissing, notmissing]
    global labels = collect(skipmissing(labels))
end

function meandistances(labels, dm, check=unique(labels))
    indicies = Dict(l => findall(labels .== l) for l in check)
    n = length(check)
    dists = ones(Float64, n, n)
    for i in 1:n, j in 1:n
        if i == j
            m = mean(dm[k, l] for k in indicies[check[i]], l in indicies[check[j]] if k != l)
            dists[i, j] = m
        elseif i < j
            m = mean(dm[k, l] for k in indicies[check[i]], l in indicies[check[j]])
            dists[i, j] = m
            dists[j, i] = m
        end
    end
    return dists
end

function permutation_test(labels, dm; nperms=1000)
    return cat(map(1:nperms) do _
        newlabels = shuffle(labels)
        meandistances(newlabels, dm)
        end..., dims=3)
end


d = meandistances(labels, dm)
pt = permutation_test(labels, dm, nperms=5000)
ls = unique(labels)
sum(x-> x > d[2,4], pt[2,4,:])

plot(let myplots = []
    for i in 1:size(d, 1), j in 1:size(d, 1)
        h = histogram(pt[i,j,:], label = "distribution")
         plot!([(d[i,j], 0), (d[i,j], 600)], label = "true value")
        title!("$(ls[i]) vs $(ls[j])")
        xaxis!(0.:0.05:1)

        push!(myplots, h)
    end
    myplots
end..., size=(1200,1200), legend=false)


savefig(joinpath(figures, "all-distances.svg"))
```

```julia
using MultivariateStats
mds = fit(MDS, dm, distances=true)

plot(mds, group=labels, color=color3')
title!("Unique samples age groups")
savefig(joinpath(figures, "age-groups-pcoa.svg"))
```


## Maaslin2 heatmaps

```julia
results = let
    results = DataFrame(metadata=String[], feature=String[],
                        value=String[], coef=Float64[], stderr=Float64[],
                        N=Int[], not_zero=Int[], pval=Float64[], qval=Float64[], model=String[], kind=String[])
    headers = names(results)
    for (root, dirs, files) in walkdir("data/notebooks")
        filter!(f-> f == "all_results.tsv", files)
        length(files) > 0 || continue
        df = CSV.read(joinpath(root, files[1]), missingstring="NA")

        df.qval = coalesce.(df.qval, NaN)
        df.pval = coalesce.(df.pval, NaN)

        (kind, model) = split(basename(root), "__")
        df[!, :model] .= model
        df[!, :kind] .= kind
        names!(df, headers)
        append!(results, df)
    end
    results
end

filter!(row-> row.qval < 0.1, results)
sort!(results, :qval)

CSV.write(joinpath(outpath, "all_lms.csv"), results)
```

```julia; results="hidden"
basemodel = view(results, results.model .== "age_ses_bf_birth", :)

braintypes = ["cerebellar", "subcortical", "neocortical", "limbic"]
brainmodels = view(results, map(row-> any(m-> occursin(m, row.model), braintypes), eachrow(results)), :)

base_spec = view(basemodel, basemodel.kind .== "species", :)
brain_spec = view(brainmodels, brainmodels.kind .== "species", :)
base_func = view(basemodel, basemodel.kind .== "func", :)
brain_func = view(brainmodels, brainmodels.kind .== "func", :)
```

```julia
features = unique(base_spec.feature)[1:30]
mds = unique(base_spec.metadata)
fidx = Dict(f=>i for (i, f) in enumerate(features))
midx = Dict(f=>i for (i, f) in enumerate(mds))

C = zeros(length(features), length(mds))
Q = ones(length(features), length(mds))

for row in eachrow(base_spec)
    row.feature ∈ features || continue
    C[fidx[row.feature], midx[row.metadata]] = row.coef
    Q[fidx[row.feature], midx[row.metadata]] = row.qval
end

lim = maximum(abs.([maximum(C), minimum(C)]))
hm = heatmap(C, clim=(-lim, lim), color=:RdBu_r,
    yticks=(eachindex(features), features),
    xticks=(eachindex(mds), mds), xrotation=45)

for (x,y) in Tuple.(CartesianIndices(Q))
    if Q[x,y] < 0.001
        annotate!(y,x-0.4, "***", :center)
    elseif Q[x,y] < 0.005
        annotate!(y,x-0.4, "**", :center)
    elseif Q[x,y] < 0.05
        annotate!(y,x-0.4, "*", :center)
    end
end
display(hm)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "tax_maaslin_heatmap.pdf"))
```

```julia
features = unique(brain_spec.feature)
mds = unique(brain_spec.metadata)
fidx = Dict(f=>i for (i, f) in enumerate(features))
midx = Dict(f=>i for (i, f) in enumerate(mds))

C = zeros(length(features), length(mds))
Q = ones(length(features), length(mds))

for row in eachrow(base_spec)
    row.feature ∈ features || continue
    C[fidx[row.feature], midx[row.metadata]] = row.coef
    Q[fidx[row.feature], midx[row.metadata]] = row.qval
end

lim = maximum(abs.([maximum(C), minimum(C)]))
hm = heatmap(C, clim=(-lim, lim), color=:RdBu_r,
    yticks=(eachindex(features), features),
    xticks=(eachindex(mds), mds), xrotation=45)

for (x,y) in Tuple.(CartesianIndices(Q))
    if Q[x,y] < 0.001
        annotate!(y,x-0.4, "***", :center)
    elseif Q[x,y] < 0.005
        annotate!(y,x-0.4, "**", :center)
    elseif Q[x,y] < 0.05
        annotate!(y,x-0.4, "*", :center)
    end
end
display(hm)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "brain_maaslin_heatmap.pdf"))
```

```julia
features = unique(brain_func.feature)
mds = unique(brain_func.metadata)
fidx = Dict(f=>i for (i, f) in enumerate(features))
midx = Dict(f=>i for (i, f) in enumerate(mds))

C = zeros(length(features), length(mds))
Q = ones(length(features), length(mds))

for row in eachrow(base_spec)
    row.feature ∈ features || continue
    C[fidx[row.feature], midx[row.metadata]] = row.coef
    Q[fidx[row.feature], midx[row.metadata]] = row.qval
end

lim = maximum(abs.([maximum(C), minimum(C)]))
hm = heatmap(C, clim=(-lim, lim), color=:RdBu_r,
    yticks=(eachindex(features), features),
    xticks=(eachindex(mds), mds), xrotation=45)

for (x,y) in Tuple.(CartesianIndices(Q))
    if Q[x,y] < 0.001
        annotate!(y,x-0.4, "***", :center)
    elseif Q[x,y] < 0.005
        annotate!(y,x-0.4, "**", :center)
    elseif Q[x,y] < 0.05
        annotate!(y,x-0.4, "*", :center)
    end
end
display(hm)
```
```julia; echo=false; results="hidden"
savefig(joinpath(figures, "brain_maaslin_func_heatmap.pdf"))
```
