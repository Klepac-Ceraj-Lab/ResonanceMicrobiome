```julia
using Pkg
Pkg.activate("analysis/")
using JLD2
using CSV
using DataFrames
using MultivariateStats
using Statistics
using ECHOAnalysis

@load "analysis/notebooks/figure1assets/figure1a1.jld2" speciesmds allmeta speciesmdsaxes color3
@load "analysis/notebooks/figure1assets/figure1a3.jld2" kidsspeciesmds kidsspeciesmdsaxes allkidsmeta
@load "analysis/notebooks/figure1assets/figure1b1.jld2" unirefaccessorymds ubothmeta unirefaccessorymdsaxes
@load "analysis/notebooks/figure1assets/figure1b3.jld2" kidsunirefaccessorymds kidsunirefaccessorymdsaxes
@load "analysis/notebooks/figure1assets/figure1d.jld2" r2 r2m qa allpermanovas
@load "analysis/notebooks/figure1assets/figure1ef.jld2" allfsea
allfsea.median = map(median, allfsea.cors)
rename!(r2, :unirefaccessory=>:accessory)
```

```julia
allmeta.childWeight = map(w-> ismissing(w) ? w : parse(Float64, w), allmeta.childWeight)
allmeta.BMI_calc = map(row-> row.childWeight / (row.childHeight^2) * 703, eachrow(allmeta))
kids = view(allmeta, allmeta.ageLabel .!= "mom", :)
ukids = let samples = Set(sampleid.(uniquetimepoints(allmeta.sample, takefirst=true, samplefilter=iskid)))
    map(row-> in(row.sample, samples), eachrow(allmeta))
end
ukidsmeta = view(allmeta, ukids, :)


open("data/analysis/tables/table1.tsv", "w") do io
    println(io, "thing\tvalue")
    println(io, "All samples (n)\t$(size(allmeta, 1))")
    println(io, "Total subjects (n)\t$(size(ubothmeta, 1))")
    println(io, "Moms (n)\t$(sum(==("mom"), ubothmeta.ageLabel))")
    println(io, "Kids (n)\t$(sum(!=("mom"), ubothmeta.ageLabel))")
    println(io, "Kids under 1yo (n)\t$(sum(==("1 and under"), ubothmeta.ageLabel))")
    println(io, "Kids over 2yo (n)\t$(sum(==("2 and over"), ubothmeta.ageLabel))")

    println(io, "Kids with highres (n)\t$(sum(!ismissing, ubothmeta.hires_total))")
    println(io, "Kids with cogscore (n)\t$(sum(!ismissing, ubothmeta.cogScore))")
    println(io, "Kids with both (n)\t$(sum(row-> all(!ismissing, (row.hires_total, row.cogScore)), eachrow(ubothmeta)))")

    println(io, "Non-white kids (%)\t$(round(mean(!=("Caucasian / White"), skipmissing(ubothmeta.childRace)) *100, digits=2))")
    println(io, "Mixed race kids (%)\t$(round(mean(r-> occursin(r"[Mm]ixed", r), skipmissing(ubothmeta.childRace)) *100, digits=2))")
    println(io, "Age in years (mean, SD)\t$(round(mean(skipmissing(ukidsmeta.correctedAgeDays ./ 365)), digits=2)), $(round(std(skipmissing(ukidsmeta.correctedAgeDays ./ 365)), digits=2))")
    println(io, "BMI (mean, SD)\t$(round(mean(skipmissing(ukidsmeta.BMI_calc)), digits=2)), $(round(std(skipmissing(ukidsmeta.BMI_calc)), digits=2))")
    println(io, "Maternal SES (mean, SD)\t$(round(mean(skipmissing(ukidsmeta.mother_HHS)), digits=2)), $(round(std(skipmissing(ukidsmeta.mother_HHS)), digits=2))")
end

```

## Supplementary Tables

```julia
CSV.write("data/analysis/tables/supptable1_allpermanovas.csv", allpermanovas)
CSV.write("data/analysis/tables/supptable2_allfsea.csv", allfsea[!, Not(:cors)])
```
